{
  
    
        "post0": {
            "title": "Vultr ADT Tutorials",
            "content": "",
            "url": "https://www.codebreakers.uk/adtvultrtutorials/",
            "relUrl": "/adtvultrtutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Linode ADT Tutorials",
            "content": "",
            "url": "https://www.codebreakers.uk/adtlinodetutorials/",
            "relUrl": "/adtlinodetutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Exoscale ADT Tutorials",
            "content": "There’s a few options here for learning how to use this toolkit with the Exoscale cloudhost. . 1. Expedited Build Method (recommended) . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based . 2. Hardcore Build Method . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based . 3. The Full Build Method (interactive) . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorials/",
            "relUrl": "/adtexoscaletutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Exoscale ADT Tutorials Hardcore Video",
            "content": "Follow the following: Build Machine Setup |",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialshardcorevideo/",
            "relUrl": "/adtexoscaletutorialshardcorevideo/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Exoscale ADT Tutorials Hardcore Text",
            "content": "Follow the following: Build Machine Setup |",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialshardcoretext/",
            "relUrl": "/adtexoscaletutorialshardcoretext/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Exoscale ADT Tutorials Full Build Video",
            "content": "Begin by following this: Build Machine Setup |",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsfullbuildvideo/",
            "relUrl": "/adtexoscaletutorialsfullbuildvideo/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Exoscale ADT Tutorials Full Build Text",
            "content": "Begin by following this: Build Machine Setup |",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsfullbuildtext/",
            "relUrl": "/adtexoscaletutorialsfullbuildtext/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Exoscale ADT Tutorials Expedited Video",
            "content": "Begin by following this: Build Machine Setup |",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsexpeditedvideo/",
            "relUrl": "/adtexoscaletutorialsexpeditedvideo/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Exoscale ADT Tutorials Expedited Text",
            "content": "Begin by following this: Build Machine Setup |",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsexpeditedtext/",
            "relUrl": "/adtexoscaletutorialsexpeditedtext/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Exoscale ADT Tutorials Build Machine Method",
            "content": "PRE BUILD PREPARATIONS FOR EXPEDITED AND FULL BUILDS: . Before performing an expedited or full build, you need to set up a build machine. The way you do this for Exoscale is as follows: . . 1) If you don’t have an SSH key pair or if you want a specific SSH key pair for your builds, issue the following command: .     . /usr/bin/ssh-keygen -t rsa .     . Your key will be saved to the indicated file, for example, /root/.ssh/id_rsa your path might be different such as /home/bob/.ssh/id_rsa . Issue the command (for example) .     . /bin/cat /root/.ssh/id_rsa.pub - this will be your &lt;ssh-public-key-substance&gt; .     This will give you your public key which you need later so, take a copy of the output that is printed to the screen. .       . . 2) Take a copy of the script: Initial Script .       . . 3) If you look into the script that you made a copy of in 2, you need to populate the following variables in your copy: .     . export BUILDMACHINE_USER=&quot;&quot; export BUILDMACHINE_PASSWORD=&quot;&quot; export BUILDMACHINE_SSH_PORT=&quot;&quot; export LAPTOP_IP=&quot;&quot; . export SSH= &quot; &quot; .     Now you need to decide on a username for your build machine, a password for your build machine, a port for your build machine’s ssh system and the IP address of your desktop or laptop. . If I decide on a username of “agile-deployer” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_USER=&quot;agile-deployer&quot; .     . If I decide on a password of “QQQPPPZZZMMM123098” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_PASSWORD=&quot;QQQPPPZZZMMM123098&quot; .     . If you decide on an SSH_PORT of “1035” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_SSH_PORT=&quot;1035&quot; .     . You need to give the script your laptop IP address. You can do this by going to https://www.whatsmyip.com and so, if your ip address is: “111.111.111.111” and pasting your ip address into your copy as follows: .     . export LAPTOP_IP=&quot;111.111.111.111&quot; .     . The public ssh key that you took a copy of in 1 needs to be pasted as follows: .     . export SSH= &quot;&lt;ssh-public-key-substance&gt; &quot; .     . The top part of the copy that you made in 2 will now look like this: .     . #!/bin/bash /bin/mkdir /root/logs OUT_FILE=&quot;webserver-build-out-`/bin/date | /bin/sed &#39;s/ //g&#39;`&quot; exec 1&gt;&gt;/root/logs/${OUT_FILE} ERR_FILE=&quot;webserver-build-err-`/bin/date | /bin/sed &#39;s/ //g&#39;`&quot; exec 2&gt;&gt;/root/logs/${ERR_FILE} ############################################################################################### # SET THESE FOR YOUR BUILD CLIENT MACHINE # THIS WILL NOT START A BUILD IT WILL JUST SETUP THE TOOLKIT # USE THIS IF YOU WANT TO PERFORM AN EXPEDITED OR A FULL BUILD FROM THE COMMAND LINE # ssh -i &lt;ssh-private-key&gt; -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; # $BUILDCLIENT_USER&gt;sudo su # password:${BUILDCLIENT_PASSWORD} # cd agile-infrastructure-build-client-scripts/logs ################################################################################################# export BUILDMACHINE_USER=&quot;agile-deployer&quot; export BUILDMACHINE_PASSWORD=&quot;QQQPPPZZZMMM123098&quot; #Make sure any password you choose is strong enough to pass any strength enforcement rules of your OS export BUILDMACHINE_SSH_PORT=&quot;1035&quot; export LAPTOP_IP=&quot;111.111.111.111&quot; /bin/echo &quot; #BASE OVERRIDES export SSH= &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEgqlNPY9uh6SpihNXm/7XGqOKvAcH8Z0Y6pZG9lTIm/PHI5VijIFqs0OzM3DPLFARtut7lojBoKq9ljBmKeVBGX5EkJ5O3CJfEZs9E13e2Qk+7F9wTmoMBG8XY4l/SmD9HddLTS/7Oadg+C4RDxHlSMrl1PSCdzlM14spHCI8rwUntNCUY+fObolqel0829zYDX0oEWzYyoIEUs1847X3cRp9+yZsjqSD5Nw9jacLcWjtdfClEvx5F8ZVm0+s5OLtz9cCf6NkOgYf3KFz+e8qAO/w83Umh5B2Gem1uOxSDtUmzVlRiMTfP6CTSKRnYRnkb97F9RZsmAsG6+g+eKvp root@penguin &quot; #paste your public key here The rest of the script will appear below here .       . . 4) Take a copy of this entire updated script and keep it safe because you will likely want to use this script multiple times in future deployments remember that anyone who has a copy of this script you have made has enough information to access the build machine you are going to deploy in a minute. .       . . 5) What you need to do now is to use this script to spin up your build machine and you will do this by pasting it into the user data area of your build machine. . You will need to create a security group for your build machine. You can do this as follows:     . Click on the security groups option of your exoscale GUI .     . .     . Click “Add Security Group” and call it “ADT Build Machine” or something to your liking and then click “Create Group” .     . .     . .     . You can then see your new security Group “adt build machine” listed . .     . .     .     . .     . .     . In the exoscale default security group, allow through TCP connections to CIDR 0.0.0.0/0 this will allow your laptop to connect to your build machine through port 1035 .       . . 6) You need to spin up a small machine to be your build machine by clicking “Add” on the top right of the GUI. And then follow these steps: . 1. Select if you want debian 10 (or later) or ubuntu 20.04 (or later) 2. Select which zone you want to deploy to, for example, CH-GVA-2 3. Select instance type &quot;Tiny&quot; for example 4. Select disk size (50GB) 5. Ignore SSH KEY 6. Make sure your default security group is set 7. In the &quot;User Data&quot; area of your VPC machine, paste the entire script that you were left with from 4. 8. Click Create and wait for your machine to build .       . . 7) Once the machine has built you can access it as follows: .     . Discover what the machine&#39;s IP address is by looking at the Exoscale GUI system for the IP address of the build machine - buildclientip .     . Now issue the command: .     . ssh -i /root/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . or yours might be: .     . ssh -i /home/${username}/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . Once logged in to your build machine .     . sudo su [sudo] password for agile-deployer: .     . And then enter your build machine password .     . ${BUILDMACHINE_PASSWORD} . . .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsbuildmachine/",
            "relUrl": "/adtexoscaletutorialsbuildmachine/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Digital Ocean ADT Tutorials",
            "content": "There’s a few options here for learning how to use this toolkit with the Digital Ocean cloudhost. . 1. Expedited Build Method (recommended) . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based . 2. Hardcore Build Method . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based . 3. The Full Build Method (interactive) . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based .",
            "url": "https://www.codebreakers.uk/adtdigitaloceantutorials/",
            "relUrl": "/adtdigitaloceantutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "AWS ADT Tutorials",
            "content": "",
            "url": "https://www.codebreakers.uk/adtawstutorials/",
            "relUrl": "/adtawstutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "Tutorials",
            "content": "Tutorial sets for the Agile Deployment Toolkit, organised by cloudhost provider . If you are new to this toolkit, pick which provider you want to use and then you can follow the tutorials to become familiar with how things work. . You will need to repeatedly reference the Specification throughout these tutorials. . . Digital Ocean Tutorials . | ExoscaleTutorials . | Linode Tutorials . | Vultr Tutorials . | AWS Tutorials . | .",
            "url": "https://www.codebreakers.uk/tutorials/",
            "relUrl": "/tutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "Background Philosophy",
            "content": "In another life, I was a consultant for a big IT outsourcing company used by the government for a lot of projects that they needed doing. The problem was the social disconnect. The users of the systems lived on a different planet to those of us building them. So, in order to be a consultant with conviction, I went to actually look, or, was led into looking by my intuitive self, to interact with the people that use the systems so that I could actually advise based on experience rather than assumption. Here’s what I found: . The assumption is that people who rely on government systems don’t have much to contribute. That’s a very misled assumption if you actually mix with such ones you would find out that they know more than you and that your assumptions about which end of society is the arse end is just that, an assumption and it depends on your social orientation bias not on what it actually is. That was my first lesson which I relay here. . | Secondly, we are moving in to a technocracy and the problem is that the people I have worked with or consulted with directly were often technocratically disabled in the sense that they had no experience with technology which excludes them from the technology and therefore the technocracy. Most systems bolt on “accessibility” as an afterthought what I wanted to do is to build systems that had accessibility at their core and therefore lower the barrier to entry to the technology that is available. If you think about it, if you are elderly with visual impairments, or, disabled with mental impairments, or, difficulties with the English language, these are all problems that I could see in the big corporate systems that are available ordinarily within the community. So, what I wanted to do is build a system which enables the deployment of social applications, built by developers with the highest commitment to accessibility requirements, that can be deployed and redeployed easily. That is what the Agile Deployment Toolkit is about enabling or seeking to enable. It makes it possible to easily deploy simple social networks and other application types that can be used by people who find the regular technologies a bit unwieldy. I can’t solve all problems and I have questions that need answered the same as anyone else does, but, ultimately, that is my finding and that is what I have worked on. Something that this toolkit could be used for might be for coordinating social projects. . | Built for local people and run by local people. Something else I found is that we have this huge global thing going on and we don’t know who our neighbours are. If you have a problem with one of the big social networks it is next to impossible to get access to “support” because there’s billions of users and so on. If you have hyper local applications they can be run by people who actually live in the same town as you and by doing that, you can have direct access to the techs that run your community site. You can also specialise your applications specifically for the needs of your local community. . | The challenge was to build something useful without much money. Purity of motivation means that you do it for the love of it and not just for the money, so, this is not a big budget attempt here, in fact, there is hardly any budget at all, but, consider that that is what keeps it as pure as possible? . | Another simple philosophy I learnt the hard way is that this is a team effort. Nobody wants to see some bloke at the top of the mountain whilst there are others who are at base camp and that is kind of what has happened with technology. There are people who are at the top of the technology mountain and pushing on further still, I was heading in that direction, but, I got pulled out of that path and had to descend back down to mix and help people who had no technical knowledge at all and that is what you learn, if we are going to become a technocracy we do it together and all of us have a duty to make sure that we do it as a whole team and not as a few gung-ho intrepids. So, what I wanted to do is use some of my technocratic potential to build software that has the potential to include those who were previously excluded. That is functioning as a team and until we do, we won’t make it home (psychologically). You see, once God shows up, He makes it clear to you that your idea of who and who isn’t important might not be the same as His idea of who is and who isn’t important. That’s a tough lesson. . | On a grand scale, and, this is philosophical rather than practical, there are two ways to run governments, centralised and decentralised. We can all see that governments are struggling and its no wonder, they are only human. The point of decentralisation (which is what this toolkit (and dare I say it Brexit)) are about is about redressing the power vacuum that monolithic centralied institutions leave at a local level. In other words, if you use a toolkit like this, or, something similar to organise locally that’s as effective a way of governing as anything that is centralised into power titan control systems. In essence, there is a happy medium, kinda not UK, kinda not EU, but more like EUK and that involves hyper local projects and without wanting to undo the government in any way, I think we can all see that if there are tools which can help with local organisation that that is not only good for communities but it is also good for governments. If you do run your social networks locally, then, you have more capacity to monitor what is happening with it. The whole point is that there is no centralisation of anything here, what I have written as a toolkit is just a tool that can be used in the process of leveraging more local influence over the process of social organisation. . | Untapped power base. Maybe I am a freak case but have you ever considered that “none of us have all of the answers but, we all have some of them?”. What this means is that you might be struggling because you just assumed that some sections of society have the answers (universities, schools, companies) and other sections don’t, (the elderly, mental health patients and criminals). Is it beneath you to actually come down off your high horse and make it so that you are open to what others have to say even if perhaps you assumed that you only had things to tell them and they didn’t have anything to tell you? If you start including everyone then you find that everyone has something to add to the mix and if you think they don’t you are not being a wholly person. . | To sum up my learnt philosophy then, I want to build hyper local applications that can be repeatedly deployed, make those applications as good as possible by having the very best CMS based talent develop them with accessibility in mind and have a consistent process for deploying the same application multiple times, for example, for town A, town B, town C and so on. .",
            "url": "https://www.codebreakers.uk/backgroundphilosophy/",
            "relUrl": "/backgroundphilosophy/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "The Agile Deployment Toolkit",
            "content": "Introduction . Tech Overview . Background Philosophy . Tutorials .",
            "url": "https://www.codebreakers.uk/agiledeploymenttoolkit/",
            "relUrl": "/agiledeploymenttoolkit/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "The Agile Deployment Toolkit Tech Overview",
            "content": "Fully automated virgin server configuration and deployment with sensible default webserver and database configuration settings with best practice security guidelines baked in. . | Flexible deployment options - no of webservers to use for the deployment with a development mode, for when you are developing your application and a deployment mode for when it is time for it to “go live” . | In built resilient and scalable architecture including flexible time based scaling to accommodate increased or decreased capacity . | Option to use “self managed” databases or to use managed as a service databases from a 3rd party (DBaaS) . | Moderate learning curve for usage . | Support for deployment to multiple cloud hosts. Currently, Digital Ocean, Exoscale, Linode, Vultr and AWS. If you develop a problem or issue with the cloud host you have deployed to, simply perform a frictionless redeploy to another of the supported VPS cloud host providers . | Easily choose the machine sizes that you want to deploy to, depending on what capacity you need . | Deploy to Ubuntu or Debian with extensibility of the scripts to other flavours of Linux taken into consideration . | Automated “double” backups . | Easy inbuilt SMTP configuration for your application . | Several supported application types - Joomla, Wordpress, Drupal, Moodle and with a little work, further application types can be added . | Built with general extensibility in mind so that scripts are easy to extend . | Free to use, free to extend . | Choice to use Cloud-flare as your DNS service provider for increased security . | Easy command line access to your servers (no faff) . | Choice of webservers to use, NGINX, APACHE, LIGHTTPD . | Current support for PHP based applications, but, with potential to be extended to support other languages . | Ability to store application assets in the cloud which saves disk capacity (and cost) on your server machines . | Choice of self managed databases to use, currently, MariaDB, MySQL or Postgres . | Ability to deploy your own mailservers using iRedmail . | Status messages deliverable by email during system operation . | The Agile Deployment Toolkit is designed to have a core of functionality, which can be thoroughly tested and well maintained, but, it is also designed to be extensible outside of the core so that it is flexible enough to support an arbitrary set of solutions as are required by the users of the toolkit. . | .",
            "url": "https://www.codebreakers.uk/agiledeploymenttoolkittechoverview/",
            "relUrl": "/agiledeploymenttoolkittechoverview/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "Introduction",
            "content": "Agile Deployment Toolkit . Is shared hosting not the ideal solution for your web hosting? . | Do you want to have your own set of configured VPS servers but do not want to spend the time configuring and deploying software on them? . | Do you want to have consistent security processes baked in to your server deployments? . | Would you like to be able to redeploy to a different (supported) VPS host easily - within 20 minutes or so, if you needed to? . | Does automated server configuration with the latest releases of software included for each deployment sound attractive? . | Would you like a low barrier to entry solution using nothing but basic scripting techniques? . | . Then you might be interested in the Agile Deployment Toolkit which currently supports Joomla, Wordpress, Moodle and Drupal CMS applications. . . MOTIVATION: You can find lots of tutorials online which show how to install and configure server machines using products such as Apache, Nginx, Mysql, Postgres and so on. Following these tutorials to build your own server system is time consuming and possibly error prone if, for example, you don’t remember to do everything with regard to security when you build your server, you could have problems. What I decided to do was write some scripts which would automate the building of my servers in a consistent and predictable way. Using my software, popular CMS systems can be deployed starting from scratch with brand new VPS machines in minutes rather than possibly hours or even days providing nothing to the scripts but configuration parameters. For some people, this solution might be a good fit for their server deployments rather than having to follow tutorials and so on. With this method, you still have full access to your VPS systems to tinker with the configuration, or, you could modify the scripts directly to attain an “other than default” configuration for your server systems. This approach has application backups and so on built in and the scripts are written to be extensible by anyone. . Deploy to any one of several major cloud providers according to your needs. This toolkit uses the term “agile” to indicate that it’s easy to redeploy to another one of the supported cloud hosts should your current cloudhost not support your needs - in an agile way. This toolkit is ideal for anyone who wants to investigate how to run their own server systems. It gives a unique, consistent way of server deployment which can be reviewed, tweaked and understood in the same way that car enthusiasts might review, tweak and understand the inner workings of their cars. The intention is to use this for serious systems, but, learners or students might find it of benefit if they want to experiment with server configurations and so on. . Many VPS providers out there, don’t necessarily have clear processes for deploying scalable CMS systems, so, maybe, if that’s the case, this might help. This toolkit is built from the ground up to be extensible so, if you have a use case or requirement that it doesn’t fulfil, you are welcome to fork the repositories and extend as your needs demand. There’s many many PHP applications out there and almost certainly with appropriate extensions to these scripts they can be deployed and operated at scale. The design pattern here is essentially akin to a CMS system’s design in that I write and maintain a core set of scripts and other developers, if they choose to, can extend the scripts to meet additional needs or requirements. The ultimate aim is to be able to treat whole applications as out of the box solutions. . OBJECTIVE: To provide a well written and designed toolkit which facilitates repeated bespoke CMS application deployments to various VPS providers with customised branding using nothing but command line configuration options. . NOTE: I am open to all improvement suggestions and the toolkit has been written to be easily extensible in all regards, so you are free to extend this toolkit to meet your own needs should your requirements fall outside that which is already supported. . . Below is a list of VPS cloud hosts that this toolkit currently supports. . . . Digital Ocean is a cloudhost that is simple to use and global. They also provide managed databases and so on, so their service offering is growing. .         . . . Exoscale is a Swiss cloudhost, so, if you like the idea of being with a Europe centric cloudhost because their datacentres are either in Switzerland (in decommissioned military nuclear bunkers) or elsewhere within the EU. .         . . . Linode is a cloudhost from the US with global reach. Again, their interfaces are simple and their service offerings are expanding. .         . . . Vultr are a smart cloudhosting company. They seem particularly strong on security to me with processes and so on in place to make sure that things are tied down in terms of security. .         . . . AWS is the world’s largest cloudhost. It also provides a plethora of services such as managed databases and so on which means that your application will be well served if you deploy here.         . .",
            "url": "https://www.codebreakers.uk/introduction/",
            "relUrl": "/introduction/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://www.codebreakers.uk/2020/01/14/test-markdown-post.html",
            "relUrl": "/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My Github is at: Agile Deployer .",
          "url": "https://www.codebreakers.uk/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.codebreakers.uk/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}