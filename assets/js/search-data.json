{
  
    
        "post0": {
            "title": "Vultr ADT Tutorials",
            "content": "",
            "url": "https://www.codebreakers.uk/adtvultrtutorials/",
            "relUrl": "/adtvultrtutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Linode ADT Tutorials",
            "content": "There’s a few options here for learning how to use this toolkit with the Linode cloudhost. . 1. Expedited Build Method (recommended) . This tutorial set needs to be followed sequentially in numeric order. . Tutorial Set 1 (Virgin CMS Installation) Tutorial Set 2 (Baseline CMS Installation) Tutorial Set 3 (Temporal CMS Installation) . 2. Hardcore Build Method (expert) . Tutorial Set 1 (Virgin CMS Installation) Tutorial Set 2 (Baseline CMS Installation) Tutorial Set 3 (Temporal CMS Installation) . 3. The Full Build Method (interactively guided) . Tutorial Set 1 : (Full Build) .",
            "url": "https://www.codebreakers.uk/adtlinodetutorials/",
            "relUrl": "/adtlinodetutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Linode ADT Tutorials Hardcore Virgin Joomla",
            "content": "HARDCORE BUILD PROCESS . On your laptop perform the following command: | git clone https://github.com/agile-deployer/agile-infrastructure-build-client-scripts.git . cd agile-infrastructure-build-client-scripts . We need several pieces of information from our cloud host and 3rd party services for a successful build to be possible: . I am going to use the example of joomla to build from and so this example will build a virgin installation of the latest version of joomla . This will deploy the latest version of Joomla using template 1 which you can read about here with the clone you have just made onto your laptop: . ./agile-infrastructure-build-client-scripts/blob/master/templatedconfigurations/templates/linode/linode1.description and the hardcore method. . . To find the latest version of Joomla, I go to this URL in my browser: . Joomla Latest . And I note the latest version in a separate text file: . joomla_version=&quot;4.0.4&quot; . You can of course use a legacy version of joomla also by choosing a different version numnber. . . I then need a personal access token, I go to the top right and select “API Keys” and generate a personal access token with . “Account,Domains, Images, IPs, Linodes, Object Storage, Stackscripts and Volumes” . scope enabled. This personal access token I shall call “AAAAA” . IMPORTANT EDIT: To use the native firewalling system the linode-cli tool seems to only accept personal access tokens with full access rights, so, whilst that is the case, you will need to ignore the above scoping and just chose “Select All” with “Read and Write” access when you create your personal access token. . linode_personal_access_token=&quot;AAAAA&quot; where AAAAA is the actual values generated when I click &quot;Create Token&quot; . . You now need to set up Object Storage and obtain Object Storage Keys. You can do this by Selecting Object Storage on the left hand side of your Linode console. . You then click “Access Key” and then, “Create Access Key” and this will display an “Access Key” and a “Secret Key” which you need to make a note of and keep safe: . linode_S3_access_key=&quot;BBBBB&quot; linode_S3_secret_key=&quot;CCCCC&quot; . . You now need to make a note of the email address that you have registered with your linode account: . linode_email=&quot;testemail@testemail.com&quot; . . You then need the url that you want to use for your website. If you don’t have a DNS URL for your website, you need to purchase one and set the nameservers to linode as described in ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/Nameservers.md . linode_dns_name=&quot;www.testsocialnetwork.org.uk&quot; . . You then need the username and owner of you git provider application repositories. To do this, if you don’t have a git account sign up with one (in this case using github, but, you have the choice of bitbucket and gitlab as well) and record the username that you sign up with: . gitusername=&quot;mytestgituser&quot; . Then create a “personal access token” by following: . Personal Access Token making sure you give it all “repo” permissions . gitpersonalaccesstoken=&quot;KKKKK&quot; where KKKKK represents your actual personal access token . . To keep this as simple as possible, I have missed out the SMTP credentials, but, you can find out more about them ./agile-deployer/agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/DeployingSMTPService.md. If you wish to include SMTP credentials you will need to have a service offering set up with either sendpulse, mailjet or AWS SES. . . NOTE: The CLOUDHOST_PASSWORD value must be set in your template for a linode based build to succeed. . . So, that should be all the core credentials that I need to make a deployment. I can save my text file now (and keep it secure) because I might want to use these credentials again for other deployments or redeployments. . . . So, to begin an hardcore build process, I need to: . vi ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode1.tmpl . This file looks like this (I have put a dashes before each line I wish to modify for this deployment which is for illustrative purposes only): . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### -- export APPLICATION=&quot;&quot; -- export JOOMLA_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;9.2.1&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal -- export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# -- export S3_ACCESS_KEY=&quot;&quot; #MANDATORY -- export S3_SECRET_KEY=&quot;&quot; #MANDATORY export S3_HOST_BASE=&quot;eu-central-1.linodeobjects.com&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For linode, this always needs to be set to &quot;US&quot; export TOKEN=&quot;&quot; #MANDATORY this is your linode personal access token export ACCESS_KEY=&quot;&quot; #NOT REQUIRED export SECRET_KEY=&quot;&quot; #NOT REQUIRED -- export DNS_USERNAME=&quot;&quot; #MANDATORY -- export DNS_SECURITY_KEY=&quot;&quot; #MANDATORY export DNS_CHOICE=&quot;linode&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice -- export CLOUDHOST_EMAIL_ADDRESS=&quot;&quot; #MANDATORY export BUILDOS=&quot;&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;&quot; #MANDATORY one of 20.04|10 export DEFAULT_USER=&quot;root&quot; #MANDATORY - This should always be &#39;root&#39; on linode -- export BUILD_IDENTIFIER=&quot;&quot; #MANDATORY -- export WEBSITE_DISPLAY_NAME=&quot;&quot; #MANDATORY -- export WEBSITE_NAME=&quot;&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial -- export WEBSITE_URL=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_PROVIDER=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_OWNER=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_USERNAME=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_TOKEN=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; -- export WEBSERVER_CHOICE=&quot;APACHE&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; -- export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; -- export APPLICATION_IDENTIFIER=&quot;0&quot; export PHP_VERSION=&quot;7.4&quot; export REGION=&quot;&quot; export REGION_ID=&quot;eu-central&quot; export DB_SIZE=&quot;g6-nanode-1&quot; export DB_SERVER_TYPE=&quot;g6-nanode-1&quot; export WS_SIZE=&quot;g6-nanode-1&quot; export WS_SERVER_TYPE=&quot;g6-nanode-1&quot; export AS_SIZE=&quot;g6-nanode-1&quot; export AS_SERVER_TYPE=&quot;g6-nanode-1&quot; export CLOUDHOST=&quot;linode&quot; export MACHINE_TYPE=&quot;LINODE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; -- export CLOUDHOST_PASSWORD=&quot;&quot; export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;linode&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;&quot; export BUILD_CLIENT_IP=&quot;&quot; export PUBLIC_KEY_ID=&quot;&quot; . So, I have referred to the specification and I have freely chosen to modify the . WEBSERVER_CHOICE to “NGINX” PHP_VERSION to “8.0” APPLICATION_IDENTIFIER to “1” DATABASE_INSTALLATION_TYPE to “Postgres” . So, editing . vi ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode1.tmpl . and using the values I recorded in my text file earlier, I modify the file as follows, the lines beginning with dashes have been modified . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### export APPLICATION=&quot;joomla&quot; export JOOMLA_VERSION=&quot;4.0.4&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal -export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;JOOMLA:4.0.4&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# -- export S3_ACCESS_KEY=&quot;BBBBB&quot; #MANDATORY -- export S3_SECRET_KEY=&quot;CCCCC&quot; #MANDATORY export S3_HOST_BASE=&quot;eu-central-1.linodeobjects.com&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For linode, this always needs to be set to &quot;US&quot; export TOKEN=&quot;AAAAA&quot; #MANDATORY this is your linode personal access token export ACCESS_KEY=&quot;&quot; #NOT REQUIRED export SECRET_KEY=&quot;&quot; #NOT REQUIRED export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;AAAAA&quot; export DNS_CHOICE=&quot;linode&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export BUILDOS=&quot;debian&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;11&quot; #MANDATORY one of 20.04|10 11 export DEFAULT_USER=&quot;debian&quot; #MANDATORY - - This must be &quot;ubuntu&quot; if you are deploying ubuntu and &quot;debian&quot; if you are deploying debian export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_PROVIDER=&quot;github&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; -- export WEBSERVER_CHOICE=&quot;NGINX&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; -- export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; -- export APPLICATION_IDENTIFIER=&quot;1&quot; -- export PHP_VERSION=&quot;8.0&quot; export REGION=&quot;&quot; export REGION_ID=&quot;eu-central&quot; export DB_SIZE=&quot;g6-nanode-1&quot; export DB_SERVER_TYPE=&quot;g6-nanode-1&quot; export WS_SIZE=&quot;g6-nanode-1&quot; export WS_SERVER_TYPE=&quot;g6-nanode-1&quot; export AS_SIZE=&quot;g6-nanode-1&quot; export AS_SERVER_TYPE=&quot;g6-nanode-1&quot; export CLOUDHOST=&quot;linode&quot; export MACHINE_TYPE=&quot;LINODE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; -- export CLOUDHOST_PASSWORD=&quot;kwshf934^Gyd£&quot; #You can set this to whatever you like as long as it is secure and set export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;linode&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;&quot; export BUILD_CLIENT_IP=&quot;&quot; export PUBLIC_KEY_ID=&quot;&quot; . If all the dashes I have added are removed, then this file (with live values and not symbolic ones) would be ready for deployment. . You now need to copy your template as follows: . /bin/mkdir ./agile-infrastructure-build-client-scripts/overridescripts/ /bin/cp ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode1.tmpl ./agile-infrastructure-build-client-scripts/overridescripts/linode1override.tmpl . Then you need to run the script: . cd helperscripts . ./GenerateHardcoreUserDataScript.sh . This will leave you with a script: . ../userdatascripts/${userdatascript} . where ${userdatascript} is the descriptive name you gave when prompted. . It is mandatory to edit your userdata script and modify these values within it to your liking: . export BUILDMACHINE_USER=&quot;agile-user&quot; export BUILDMACHINE_PASSWORD=&quot;Hjdhfb34hd£&quot; #Make sure any password you choose is strong enough to pass any strength enforcement rules of your OS export BUILDMACHINE_SSH_PORT=&quot;1035&quot; export LAPTOP_IP=&quot;111.111.111.111&quot; . export SSH= &quot; &quot; #paste your public key here . . Now you have your userdata script take a copy of the entirity of it using copy and paste and then follow these instructions PASTING THE SCRIPT YOU HAVE JUST COPIED INTO THE USERDATA AREA OF YOUR EXOSCALE MACHINE INSTEAD OF THE MODIFIED TEMPLATE. The build machine will then install AND run the agile deployment toolkit. This is just an alternative method to the expedited build process which you may or may not perfer. . At this point, your build machine should be up and running. Please review . ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/TightenBuildMachineAccess.md. . At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Access” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . . Assuming that you have your Joomla application online now after following that video, what I would do if I wanted to build a Wordpress, Moodle or Drupal installation would be to follow the same procedure with the same template, but, minimally change the template as follows: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;WORDPRESS&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;2&quot; export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; #I don&#39;t support Wordpress using Postgres . For Drupal: . export APPLICATION=&quot;drupal&quot; export DRUPAL_VERSION=&quot;9.2.6&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;DRUPAL:9.2.6&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;3&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;MOODLE&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;4&quot; . So, you have a template now that you can use over and over again for deploying different installations of these CMS systems. You can study the spec and learn how to modify the template in order to change machine sizes, regions, PHP settings and so on. .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialshardcorevirgin/",
            "relUrl": "/adtlinodetutorialshardcorevirgin/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Linode ADT Tutorials Hardcore Temporal Joomla",
            "content": "YOU MUST HAVE THE MACHINES STILL RUNNING FROM THE PREVIOUS TUTORIAL TO COMPLETE THIS TUTORIAL SUCCESSFULLY . On your build machine, you need to now make temporal backups of your application sourcecode and your application database. You do this as follows: . cd /home/&lt;your username&gt;/agile-infrastructure-build-client-scripts/helperscripts . Then perform a temporal database backup . /bin/sh PerformDatabaseBackup.sh . Answering all of the questions and picking a periodicity, for example, HOURLY (make sure DISABLE_HOURLY=0) in your template . Then perform a temporal website sourcecode backup . /bin/sh PerformWebsiteBackup.sh . Making sure you pick the same periodicity as for the temporal database backup, for example, “HOURLY” . What we are then interested in is template 3 which is at: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode3.tmpl . I can extract the values for the following variables from template 1 or template 2 which I used in the previous tutorial and set them in template 3, replace these with your own live values: . export S3_ACCESS_KEY=&quot;BBBBB&quot; #MANDATORY export S3_SECRET_KEY=&quot;CCCCC&quot; #MANDATORY export TOKEN=&quot;AAAAA&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;BBBBB:CCCCC&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY . What I then do is adjust . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode3.tmpl . to contain these values instead of its defaults. . I then need to set the template to use the temporal backups that I have generated and I do that by setting these values in template3: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export BUILD_CHOICE=&quot;2&quot; #MANDATORY 2=hourly, 3=daily, 4=weekly, 5=monthly, 6=bimonthly export BUILD_ARCHIVE_CHOICE=&quot;hourly&quot; #MANDATORY hourly, daily, weekly, monthly, bimonthly export PERSIST_ASSETS_TO_CLOUD=&quot;1&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;images&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . Shutdown any webservers that you have running from tutorial 2 and you are then ready to perform a temporal build, as shown below: . FOLLOW THESE STEPS ON YOUR LAPTOP IF YOU DON’T HAVE A BUILD SERVER RUNNING . You now need to copy your template as follows on your laptop: . /bin/cp ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl ./agile-infrastructure-build-client-scripts/overridescripts/linode2override.tmpl . Then you need to run the script: . cd helperscripts . ./GenerateOverrideTemplate.sh . ./GenerateHardcoreUserDataScript.sh stack . This will leave you with a script: . ../userdatascripts/${userdatascript} . where ${userdatascript} is the descriptive name you gave when prompted. . Now you have your userdata script take a copy of it using copy and paste and then follow these instructions PASTING THE SCRIPT YOU HAVE JUST COPIED INTO THE USERDATA AREA OF YOUR LINODE MACHINE INSTEAD OF THE MODIFIED TEMPLATE SUGGESTED. . The build machine will then install **AND** run the agile deployment toolkit. This is just an alternative method to the expedited build process which you may or may not perfer. . At this point, your build machine should be up and running. Please review: . ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/TightenBuildMachineAccess.md. . At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Access” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . If all has gone according to plan, you will have seen a full deployment of your temporal backup. . . DEPLOYMENT USING MANAGED DATABASES . There’s something else to be aware of, if you want to deploy a managed DBaaS system instead of just using the one that is built in to the build process you can do that as detailed in this and this document . . DEPLOYMENT USING SNAPSHOTS . You can also build your webservers using snapshots that you generate and then use. You can read about how to perform snapshot builds here. . . OTHER APPLICATION TYPES . In order to do a temporaly build from backups you have made for a different application type (wordpress, drupal or moodle) you will need to alter the following variables in your template compared to what you have used above: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export DIRECTORIES_TO_MOUNT=&quot;wp-content.uploads&quot; . For Drupal: . export APPLICATION=&quot;drupal&quot; export DIRECTORIES_TO_MOUNT=&quot;sites.default.files&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export DIRECTORIES_TO_MOUNT=&quot;moodledata.filedir&quot; .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialshardcoretemporal/",
            "relUrl": "/adtlinodetutorialshardcoretemporal/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Linode ADT Tutorials Hardcore Baseline Joomla",
            "content": "HARDCORE BUILD PROCESS . If you have followed the tutorial here, then you will have an active Joomla, or possibly Wordpress, Drupal or Moodle installation active through your web browser. If you are using a baseline that someone else has developed or a baseline that you developed some time ago, then you might not have servers running yet. . What you need to do now is to customise your version of (Joomla) so that it is a specialised application for example a blog or a social network and so on. . What I have done for this tutorial is install a very simple application using a tool called “Community Builder” which you can find here: Community Builder. Literally all I have done is install the latest version (at the time) into my Joomla installation that I installed earlier. . The next thing I have to do is to generate a baseline of my application so that the baseline can be redeployed. A baseline is stored with whatever git provider you have set in your template when you made your deployment. In my case my git account is my “adt-demos” account with Github. . In order to create the baseline I am going to deploy, I need to do the following: . Choose a unique identifier for my baseline repositories, in this case I am going to call them, “communitybuilder” yours will be a different name. | Go to you git provider account console with your browser, in this case it is my “adt-demos” account with Github and create two private repositories: | communitybuilder-webroot-sourcecode-baseline communitybuilder-db-baseline . Once these two repositories have been created you are ready to make a baseline of the joomla install that you have modified. . To generate your baseline, you have to run two commands on your build machine. At the command prompt of your build machine cd into the helperscripts directory of your agile deployment toolkit installation. In my case it is like this: | cd /home/agile-deployer/agile-infrastructure-build-client-scripts/helperscripts . Once you are in that directory, you need to issue the command: . /bin/sh PerformWebsiteBaseline.sh . Once that starts running, you need to answer the questions you are prompted for entering, “communitybuilder” if you are prompted for an identifier. . In a minute or two your webiste baseline will have been generated and you should check in its repository that sourceode has been generated to it. . Now you need to generate a baseline of the database. To do that you need to issue the command: . /bin/sh PerformDatabaseBaseline.sh . If there is a prompt for an identifier, I enter “communitybuilder” and make very sure that the repository communitybuilder-db-baseline exists . In short order, my database is backed up to the Github repository and again, I should check that the repository I have chosen has been updated using the github console. . . My application baselines are now complete. The process for generating baselines is the same whichever application type you have built, Joomla, Wordpress, Drupal or Moodle. . The next step is to make a deployment of these baselines. So, if I have any webservers or databases running with my cloudhost, I need to take them off line (shut them down) and destroy them. . I am then interested in template 2 because that is the template that is used for deploying baselined application. If its not clear, template 1 is used for virgin CMS deployments, template 2 is used for baselined application deployments and template 3 is used for temporal deployments. . So, template 2 is located here on my build machine: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl . I can copy the credentials that I need from the values that I set them to previously in template1. So, looking in template1 if it is available from a previous build, . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode1.tmpl . I can extract the values for the following variables: . export S3_ACCESS_KEY=&quot;BBBBB&quot; #MANDATORY export S3_SECRET_KEY=&quot;CCCCC&quot; #MANDATORY export TOKEN=&quot;AAAAA&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;BBBBB:CCCCC&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY . What I then do is adjust . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl . to contain these values instead of its defaults. . With that done, because I used “Postgres” which from the file dbe.dat in the webroot of my baseline when I deployed Joomla originally, I need to make sure that I set the database to use as follows: . export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; . There are some other values that I need to change in /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl, as follows: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export APPLICATION_IDENTIFIER=&quot;1&quot; #MANDATORY (1 for joomla, 2 for wordpress, 3 for drupal, 4 for moodle) export BASELINE_DB_REPOSITORY=&quot;communitybuilder-db-baseline&quot; #MANDATORY export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;communitybuilder-webroot-sourcecode-baseline&quot; #MANDATORY export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . You can make any other adjustments you want like if you want to choose APACHE instead of NGINX or change the size of the machines (you can find out about such things in the specification). . FOLLOW THESE STEPS ON YOUR LAPTOP IF YOU DON’T HAVE A BUILD SERVER RUNNING . You now need to copy your template as follows on your laptop: . /bin/cp ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl ./agile-infrastructure-build-client-scripts/overridescripts/linode2override.tmpl . Then you need to run the script: . cd helperscripts . ./GenerateOverrideTemplate.sh . ./GenerateHardcoreUserDataScript.sh stack . This will leave you with a script: . ../userdatascripts/${userdatascript} . where ${userdatascript} is the descriptive name you gave when prompted. . Now you have your userdata script take a copy of it using copy and paste and then follow these instructions PASTING THE SCRIPT YOU HAVE JUST COPIED INTO THE USERDATA AREA OF YOUR LINODE MACHINE INSTEAD OF THE MODIFIED TEMPLATE. . The build machine will then install **AND** run the agile deployment toolkit. This is just an alternative method to the expedited build process which you may or may not perfer. . At this point, your build machine should be up and running. Please review ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/TightenBuildMachineAccess.md. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in &quot;Tightening Build Machine Access&quot; to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . IF YOU DO HAVE A BUILD SERVER RUNNING FROM A PREVIOUS BUILD, THEN JUST DO THE FOLLOWING . If you follow these steps, then, you will have a copy of your customised Joomla application running in the cloud. Leave the servers you have deployed running for use in the next tutorial in the series. .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialshardcorebaseline/",
            "relUrl": "/adtlinodetutorialshardcorebaseline/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Linode ADT Tutorials Full Build",
            "content": "PREBUILD NECESSITIES . If you don’t already have a build machine running in the Linode cloud, follow these steps to get ready for the main build) . Begin by following this: Build Machine Setup . | At this point, your build machine should be up and running. Please review Tightening Build Machine Firewall. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Firewall” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . | . FULL BUILD PROCESS . To begin with you will need to have prepared, as a mimimum, for a Joomla interactive build the following information: . To find the latest version of Joomla, I go to this URL in my browser: . Joomla Latest . And I note the latest version in a separate text file: . joomla_version=&quot;4.0.4&quot; . You can of course use a legacy version of joomla also by choosing a different version numnber. . . I then need a personal access token so I go to the top right and select “API Keys” and generate a personal access token with . Account,Domains, Images, IPs, Linodes, Object Storage, Stackscripts and Volumes . scope enabled. This personal access token I shall give a value of “AAAAA” . IMPORTANT EDIT: To use the native firewalling system the linode-cli tool seems to only accept personal access tokens with full access rights, so, whilst that is the case, you will need to ignore the above scoping and just chose “Select All” with “Read and Write” access when you create your personal access token. . linode_personal_access_token=&quot;AAAAA&quot; where AAAAA is the actual values generated when I click &quot;Create Token&quot; . . You now need to set up Object Storage and obtain Object Storage Keys. You can do this by Selecting Object Storage on the left hand side of your Linode console. . You then click “Access Key” and then, “Create Access Key” and this will display an “Access Key” and a “Secret Key” which you need to make a note of and keep safe: . linode_S3_access_key=&quot;BBBBB&quot; linode_S3_secret_key=&quot;CCCCC&quot; . . You now need to make a note of the email address that you have registered with your linode account: . linode_email=&quot;testemail@testemail.com&quot; . . You then need the url that you want to use for your website. If you don’t have a DNS URL for your website, you need to purchase one and set the nameservers to linode as described in ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/Nameservers.md . linode_dns_name=&quot;www.testsocialnetwork.org.uk&quot; . . You then need the username and owner of you git provider application repositories. To do this, if you don’t have a git account sign up with one (in this case using github, but, you have the choice of bitbucket and gitlab as well) and record the username that you sign up with: . gitusername=&quot;mytestgituser&quot; . Then create a “personal access token” by following: . Personal Access Token making sure you give it all “repo” permissions . gitpersonalaccesstoken=&quot;KKKKK&quot; where KKKKK represents your actual personal access token . . THE ACTUAL BUILD . The full build process is interactive and guided so you need to answer the questions it posits when it posits them to perform a full build: . ssh onto the build machine you started in 1. from your laptop. . cd /home/&lt;username&gt;/agile-infrastructure-build-client-scripts/ . /bin/sh AgileDeploymentToolkit.sh . Once you run this script you will prompted to enter various credentials as required. .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialsfullbuild/",
            "relUrl": "/adtlinodetutorialsfullbuild/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Linode ADT Tutorials Linode Virgin",
            "content": "PREBUILD NECESSITIES . If you don’t already have a build machine running in the Linode cloud, follow these steps to get ready for the main build) . Begin by following this: Build Machine Setup . | At this point, your build machine should be up and running. Please review Tightening Build Machine Firewall. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Firewall” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . | . EXPEDITED BUILD PROCESS . This will deploy the latest version of Joomla using template 1 which you can read about here: template 1 and the expedited method. . If you have followed these steps your build machine is online and secured and you have an SSH session open to it from your laptop through which to initiate your build processes. . We need several pieces of information from our cloud host and 3rd party services for a successful build to be possible: . I am going to use the example of joomla to build from and so this example will build a virgin installation of the latest version of joomla . . To find the latest version of Joomla, I go to this URL in my browser: . Joomla Latest . And I note the latest version in a separate text file: . joomla_version=&quot;4.0.4&quot; . You can of course use a legacy version of joomla also by choosing a different version numnber. . . I then need personal acccess token so, I go to the top right and select “API Keys” and generate a personal access token with . Account,Domains, Images, IPs, Linodes, Object Storage, Stackscripts and Volumes scope . enabled. For convenience I will say this personal access token has a value “AAAAA” . IMPORTANT EDIT: To use the native firewalling system the linode-cli tool seems to only accept personal access tokens with full access rights, so, whilst that is the case, you will need to ignore the above scoping and just chose “Select All” with “Read and Write” access when you create your personal access token. . linode_personal_access_token=&quot;AAAAA&quot; where AAAAA is the actual values generated when I click &quot;Create Token&quot; . . You now need to set up Object Storage and obtain Object Storage Keys. You can do this by Selecting Object Storage on the left hand side of your Linode console. . You then click “Access Key” and then, “Create Access Key” and this will display an “Access Key” and a “Secret Key” which you need to make a note of and keep safe: . linode_S3_access_key=&quot;BBBBB&quot; linode_S3_secret_key=&quot;CCCCC&quot; . . You now need to make a note of the email address that you have registered with your Linode account: . linode_email=&quot;testemail@testemail.com&quot; . . You then need the url that you want to use for your website. If you don’t have a DNS URL for your website, you need to purchase one and set the nameservers to Linode as described here . linode_dns_name=&quot;www.testsocialnetwork.org.uk&quot; . . You then need the username and owner of you git provider application repositories. . To do this, if you don’t have a git account sign up with one (in this case using github, but, you have the choice of bitbucket and gitlab as well) and record the username that you sign up with: . gitusername=&quot;mytestgituser&quot; . Then create a github “personal access token” by following: . Personal Access Token making sure you give it all “repo” permissions . gitpersonalaccesstoken=&quot;KKKKK&quot; where KKKKK represents your actual personal access token . . To keep this as simple as possible, I have missed out the SMTP credentials, but, you can find out more about them here. If you wish to include SMTP credentials you will need to have a service offering set up with either sendpulse, mailjet or AWS SES. . . NOTE: The CLOUDHOST_PASSWORD value must be set in your template for a Linode based build to succeed. . . So, that should be all the core credentials that I need to make a deployment. I can save my text file now (and keep it secure) because I might want to use these credentials again for other deployments or redeployments. . . . So, at the command line of my build machine that we spun up earlier: . My chosen username is “agile-deployer” . So, to begin an expedited build process, I need to: . cd /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode . Then we can open up the . vi linode1.tmpl . This file looks like this (I have put a dashes before each line I wish to modify for this deployment which is for illustrative purposes only): . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### -- export APPLICATION=&quot;&quot; -- export JOOMLA_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;9.2.1&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal -- export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# -- export S3_ACCESS_KEY=&quot;&quot; #MANDATORY -- export S3_SECRET_KEY=&quot;&quot; #MANDATORY export S3_HOST_BASE=&quot;eu-central-1.linodeobjects.com&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For linode, this always needs to be set to &quot;US&quot; export TOKEN=&quot;&quot; #MANDATORY this is your linode personal access token export ACCESS_KEY=&quot;&quot; #NOT REQUIRED export SECRET_KEY=&quot;&quot; #NOT REQUIRED -- export DNS_USERNAME=&quot;&quot; #MANDATORY -- export DNS_SECURITY_KEY=&quot;&quot; #MANDATORY export DNS_CHOICE=&quot;linode&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice -- export CLOUDHOST_EMAIL_ADDRESS=&quot;&quot; #MANDATORY export BUILDOS=&quot;&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;&quot; #MANDATORY one of 20.04|10 export DEFAULT_USER=&quot;root&quot; #MANDATORY - This should always be &#39;root&#39; on linode -- export BUILD_IDENTIFIER=&quot;&quot; #MANDATORY -- export WEBSITE_DISPLAY_NAME=&quot;&quot; #MANDATORY -- export WEBSITE_NAME=&quot;&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial -- export WEBSITE_URL=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_PROVIDER=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_OWNER=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_USERNAME=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_TOKEN=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; -- export WEBSERVER_CHOICE=&quot;APACHE&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; -- export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; -- export APPLICATION_IDENTIFIER=&quot;0&quot; export PHP_VERSION=&quot;8.0&quot; export REGION=&quot;&quot; export REGION_ID=&quot;eu-central&quot; export DB_SIZE=&quot;g6-nanode-1&quot; export DB_SERVER_TYPE=&quot;g6-nanode-1&quot; export WS_SIZE=&quot;g6-nanode-1&quot; export WS_SERVER_TYPE=&quot;g6-nanode-1&quot; export AS_SIZE=&quot;g6-nanode-1&quot; export AS_SERVER_TYPE=&quot;g6-nanode-1&quot; export CLOUDHOST=&quot;linode&quot; export MACHINE_TYPE=&quot;LINODE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; -- export CLOUDHOST_PASSWORD=&quot;&quot; export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;linode&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;&quot; export BUILD_CLIENT_IP=&quot;&quot; export PUBLIC_KEY_ID=&quot;&quot; . So, I have referred to the specification and I have freely chosen to modify the . WEBSERVER_CHOICE to “NGINX” APPLICATION_IDENTIFIER to “1” DATABASE_INSTALLATION_TYPE to “Postgres” . So, editing /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode1.tmpl and using the values I recorded in my text file earlier, I modify the file as follows, the lines beginning with dashes have been modified . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### -- export APPLICATION=&quot;joomla&quot; -- export JOOMLA_VERSION=&quot;4.0.4&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;9.2.1&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal -- export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;JOOMLA:4.0.4&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# -- export S3_ACCESS_KEY=&quot;BBBBB&quot; #MANDATORY -- export S3_SECRET_KEY=&quot;CCCCC&quot; #MANDATORY export S3_HOST_BASE=&quot;eu-central-1.linodeobjects.com&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For linode, this always needs to be set to &quot;US&quot; -- export TOKEN=&quot;AAAAA&quot; #MANDATORY this is your linode personal access token export ACCESS_KEY=&quot;&quot; #NOT REQUIRED export SECRET_KEY=&quot;&quot; #NOT REQUIRED -- export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY (the email address of your linode account) -- export DNS_SECURITY_KEY=&quot;AAAAA&quot; #MANDATORY export DNS_CHOICE=&quot;linode&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice -- export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export BUILDOS=&quot;debian&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;11&quot; #MANDATORY one of 20.04|10 export DEFAULT_USER=&quot;root&quot; #MANDATORY - This should always be &#39;root&#39; on linode -- export BUILD_IDENTIFIER=&quot;nuocial&quot; #MANDATORY -- export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY -- export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial -- export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_PROVIDER=&quot;github&quot; #MANDATORY -- export APPLICATION_REPOSITORY_OWNER=&quot;githusername&quot; #MANDATORY -- export APPLICATION_REPOSITORY_USERNAME=&quot;gutusername&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY -- export APPLICATION_REPOSITORY_TOKEN=&quot;gitpersonalaccesstoken&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; -- export WEBSERVER_CHOICE=&quot;NGINX&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; -- export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; -- export APPLICATION_IDENTIFIER=&quot;1&quot; export PHP_VERSION=&quot;8.0&quot; export REGION=&quot;&quot; export REGION_ID=&quot;eu-central&quot; export DB_SIZE=&quot;g6-nanode-1&quot; export DB_SERVER_TYPE=&quot;g6-nanode-1&quot; export WS_SIZE=&quot;g6-nanode-1&quot; export WS_SERVER_TYPE=&quot;g6-nanode-1&quot; export AS_SIZE=&quot;g6-nanode-1&quot; export AS_SERVER_TYPE=&quot;g6-nanode-1&quot; export CLOUDHOST=&quot;linode&quot; export MACHINE_TYPE=&quot;LINODE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; --export CLOUDHOST_PASSWORD=&quot;kwshf934^Gyd£&quot; #You can set this to whatever you like as long as it is secure and set export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;linode&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;&quot; export BUILD_CLIENT_IP=&quot;&quot; export PUBLIC_KEY_ID=&quot;&quot; . If all the dashes I have added are removed, then this file (with live values and not symbolic ones) would be ready for deployment. . . You should now be at a point where your build machine is running and configured ready to deploy Joomla in a virgin (or uncustomised) configuration. I will show you what this will likely look like in a video: . . Assuming that you have your Joomla application online now after following that video, what I would do if I wanted to build a Wordpress, Moodle or Drupal installation would be to follow the same procedure with the same template, but, minimally change the template as follows: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;WORDPRESS&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;2&quot; export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; #I don&#39;t support Wordpress using Postgres . For Drupal: . export APPLICATION=&quot;drupal&quot; export DRUPAL_VERSION=&quot;9.2.6&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;DRUPAL:9.2.6&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;3&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;MOODLE&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;4&quot; . So, you have a template now that you can use over and over again for deploying different installations of these CMS systems. You can study the spec and learn how to modify the template in order to change machine sizes, regions, PHP settings and so on. .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialsexpeditedvirgin/",
            "relUrl": "/adtlinodetutorialsexpeditedvirgin/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Linode ADT Tutorials Expedited Temporal Joomla",
            "content": "YOU MUST HAVE THE MACHINES STILL RUNNING FROM THE PREVIOUS TUTORIAL TO COMPLETE THIS TUTORIAL SUCCESSFULLY . On your build machine, you need to now make temporal backups of your application sourcecode and your application database. You do this as follows: . cd /home/&lt;your username&gt;/agile-infrastructure-build-client-scripts/helperscripts . Then perform a temporal database backup . /bin/sh PerformDatabaseBackup.sh . Answering all of the questions and picking a periodicity, for example, HOURLY (make sure DISABLE_HOURLY=0) in your template . Then perform a temporal website sourcecode backup . /bin/sh PerformWebsiteBackup.sh . Making sure you pick the same periodicity as for the temporal database backup, for example, “HOURLY” . What we are then interested in is template 3 which is at: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode3.tmpl . I can extract the values for the following variables from template 1 or template 2 which I used in the previous tutorial and set them in template 3, replace these with your own live values: . export S3_ACCESS_KEY=&quot;BBBBB&quot; #MANDATORY export S3_SECRET_KEY=&quot;CCCCC&quot; #MANDATORY export TOKEN=&quot;XXXXX&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;BBBBB:CCCCC&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY export CLOUDHOST_PASSWORD=&quot;kwshf934^Gyd£&quot; . What I then do is adjust . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode3.tmpl . to contain these values instead of its defaults. . I then need to set the template to use the temporal backups that I have generated and I do that by setting these values in template3: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export BUILD_CHOICE=&quot;2&quot; #MANDATORY 2=hourly, 3=daily, 4=weekly, 5=monthly, 6=bimonthly export BUILD_ARCHIVE_CHOICE=&quot;hourly&quot; #MANDATORY hourly, daily, weekly, monthly, bimonthly export PERSIST_ASSETS_TO_CLOUD=&quot;1&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;images&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . Shutdown any webservers that you have running from tutorial 2 and you are then ready to perform a temporal build, as shown below: . If all has gone according to plan, you will have seen a full deployment of your temporal backup. . . DEPLOYMENT USING MANAGED DATABASES . There’s something else to be aware of, if you want to deploy a managed DBaaS system instead of just using the one that is built in to the build process you can do that as detailed in this and this document . . DEPLOYMENT USING SNAPSHOTS . You can also build your webservers using snapshots that you generate and then use. You can read about how to perform snapshot builds here. . . OTHER APPLICATION TYPES . In order to do a temporaly build from backups you have made for a different application type (wordpress, drupal or moodle) you will need to alter the following variables in your template compared to what you have used above: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export DIRECTORIES_TO_MOUNT=&quot;wp-content.uploads&quot; . For Drupal: . export APPLICATION=&quot;drupal&quot; export DIRECTORIES_TO_MOUNT=&quot;sites.default.files&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export DIRECTORIES_TO_MOUNT=&quot;moodledata.filedir&quot; .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialsexpeditedtemporal",
            "relUrl": "/adtlinodetutorialsexpeditedtemporal",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Linode ADT Tutorials Expedited Baseline Joomla",
            "content": "PREBUILD NECESSITIES . If you don’t already have a build machine running in the Linode cloud, follow these steps to get ready for the main build) . Begin by following this: Build Machine Setup . | At this point, your build machine should be up and running. Please review Tightening Build Machine Firewall. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Firewall” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . | . EXPEDITED BUILD PROCESS . If you have followed the tutorial here, then you will have an active Joomla, or possibly Wordpress, Drupal or Moodle installation active through your web browser. What you need to do now is to customise your version of (Joomla) so that it is a specialised application for example a blog or a social network and so on. . What I have done for this tutorial is install a very simple application using a tool called “Community Builder” which you can find here: Community Builder. Literally all I have done is install the latest version (at the time) into my Joomla installation that I installed earlier. . The next thing I have to do is to generate a baseline of my application so that the baseline can be redeployed. A baseline is stored with whatever git provider you have set in your template when you made your deployment. In my case my git account is my “adt-demos” account with Github. . In order to create the baseline I am going to deploy, I need to do the following: . Choose a unique identifier for my baseline repositories, in this case I am going to call them, “communitybuilder” yours will be a different name. | Go to you git provider account console with your browser, in this case it is my “adt-demos” account with Github and create two private repositories: | communitybuilder-webroot-sourcecode-baseline communitybuilder-db-baseline . Once these two repositories have been created you are ready to make a baseline of the joomla install that you have modified. . To generate your baseline, you have to run two commands on your build machine. At the command prompt of your build machine cd into the helperscripts directory of your agile deployment toolkit installation. In my case it is like this: | cd /home/agile-deployer/agile-infrastructure-build-client-scripts/helperscripts . Once you are in that directory, you need to issue the command: . /bin/sh PerformWebsiteBaseline.sh . Once that starts running, you need to answer the questions you are prompted for entering, “communitybuilder” if you are prompted for an identifier. . In a minute or two your webiste baseline will have been generated and you should check in its repository that sourceode has been generated to it. . Now you need to generate a baseline of the database. To do that you need to issue the command: . /bin/sh PerformDatabaseBaseline.sh . If there is a prompt for an identifier, I enter “communitybuilder” and make very sure that the repository communitybuilder-db-baseline exists . In short order, my database is backed up to the Github repository and again, I should check that the repository I have chosen has been updated using the github console. . . My application baselines are now complete. The process for generating baselines is the same whichever application type you have built, Joomla, Wordpress, Drupal or Moodle. . The next step is to make a deployment of these baselines. So, if I have any webservers or databases running with my cloudhost, I need to take them off line (shut them down) and destroy them. . I am then interested in template 2 because that is the template that is used for deploying baselined application. If its not clear, template 1 is used for virgin CMS deployments, template 2 is used for baselined application deployments and template 3 is used for temporal deployments. . So, template 2 is located here on my build machine: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl . I can copy the credentials that I need from the values that I set them to previously in template1. So, looking in template1, . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode1.tmpl . I can extract the values for the following variables: . export TOKEN=&quot;AAAAA&quot; #MANDATORY export S3_ACCESS_KEY=&quot;BBBBB&quot; #MANDATORY export S3_SECRET_KEY=&quot;CCCCC&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;AAAAA&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY export CLOUDHOST_PASSWORD=&quot;kwshf934^Gyd£&quot; . What I then do is adjust /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl to contain these values instead of its defaults. . With that done, because I used “Postgres” which from the file dbe.dat in the webroot of my baseline when I deployed Joomla originally, I need to make sure that I set the database to use as follows: . export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; . There are some other values that I need to change in /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/linode/linode2.tmpl, as follows: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export APPLICATION_IDENTIFIER=&quot;1&quot; #MANDATORY (1 for joomla, 2 for wordpress, 3 for drupal, 4 for moodle) export BASELINE_DB_REPOSITORY=&quot;communitybuilder-db-baseline&quot; #MANDATORY export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;communitybuilder-webroot-sourcecode-baseline&quot; #MANDATORY export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . You can make any other adjustments you want like if you want to choose APACHE instead of NGINX or change the size of the machines (you can find out about such things in the specification). . With your baseline template fully configured, you are now ready to perform a baseline build (in other words, directly install a live application starting from zilch). That will look something like the following: . If you follow these steps, then, you will have a copy of your customised Joomla application running in the cloud. . Leave the servers you have deployed running for use in the next tutorial in the series. .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialsexpeditedbaseline",
            "relUrl": "/adtlinodetutorialsexpeditedbaseline",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Linode ADT Tutorials Build Machine Method",
            "content": "PRE BUILD PREPARATIONS FOR EXPEDITED AND FULL BUILDS: . Before performing an expedited or full build, you need to set up a build machine. The way you do this for Exoscale is as follows: . . 1) If you don’t have an SSH key pair or if you want a specific SSH key pair for your builds, issue the following command: .     . /usr/bin/ssh-keygen -t rsa .     . Your key will be saved to the indicated file, for example, /root/.ssh/id_rsa your path might be different such as /home/bob/.ssh/id_rsa . Issue the command (for example) .     . /bin/cat /root/.ssh/id_rsa.pub - this will be your &lt;ssh-public-key-substance&gt; .     This will give you your public key which you need later so, take a copy of the output that is printed to the screen. .       . . 2) Take a copy of the script: Initial Script and make a stack sript out of it which will look like: . .       . . 3) If you want to deploy a machine (debian of ubuntu) using the stack script that you made in 2, you need to populate the following variables in your copy: .     . BUILDMACHINE_USER=&quot;&quot; (for example agile-deployer) BUILDMACHINE_PASSWORD=&quot;&quot; (Make sure the password is complex enough to satisfy any strength checks that the OS performs) BUILDMACHINE_SSH_PORT=&quot;&quot; (for example 1056) LAPTOP_IP=&quot;&quot; (www.whatsmyip.com) . SSH= &quot; &quot; (the public key that you installed on your laptop as a key pair in 1) . Once you deploy your linode using the stack script from 2 it will look something like the following and you need to populate the variables required as you would for any other Stack Script on Linode. . . Select a machine image to build, a region and a machine size (most probably quite a small machine) . . Then enter a root password, make sure it is complex enough to satisfy any strength checks built into the OS . . Then switch on private networking . . 4) If you are sure that all your variables are set correctly in the stack script you have created, you can now actually deploy a Linode using it and it will install the agile deployment toolkit on it. .       . . 6) Add a firewall to your build machine linode cutting off all but the SSH port and Ping from the ip address of your laptop. In other words, the only machine which has any access to your build machine linode is your own laptop through ssh and ping. . For SSH, do as follows for the ip address of your laptop: . . For Ping, do as follows for the ip address of your laptop: . . . 5) You can access your build machine now as follows: .     . Discover what the machine&#39;s IP address is by looking at the Linode GUI system for the IP address of the build machine - 212.71.248.95 . .     . Now on your laptop issue the command: .     . ssh -i /root/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . or yours might be: .     . ssh -i /home/${username}/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . Once logged in to your build machine .     . sudo su [sudo] password for agile-deployer: .     . And then enter your build machine password .     . ${BUILDMACHINE_PASSWORD} .     . On the command line of your laptop it looks like the following: . . .",
            "url": "https://www.codebreakers.uk/adtlinodetutorialsbuildmachineexpedited/",
            "relUrl": "/adtlinodetutorialsbuildmachineexpedited/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Exoscale ADT Tutorials",
            "content": "There’s a few options here for learning how to use this toolkit with the Exoscale cloudhost. . 1. Expedited Build Method (recommended) . This tutorial set needs to be followed sequentially in numeric order. . Tutorial Set 1 (Virgin CMS Installation) Tutorial Set 2 (Baseline CMS Installation) Tutorial Set 3 (Temporal CMS Installation) . 2. Hardcore Build Method (expert) . Tutorial Set 1 (Virgin CMS Installation) Tutorial Set 2 (Baseline CMS Installation) Tutorial Set 3 (Temporal CMS Installation) . 3. The Full Build Method (interactively guided) . Tutorial Set 1 : (Full Build) .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorials/",
            "relUrl": "/adtexoscaletutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Exoscale ADT Tutorials Hardcore Virgin Joomla",
            "content": "HARDCORE BUILD PROCESS . On your laptop perform the following command: | git clone https://github.com/agile-deployer/agile-infrastructure-build-client-scripts.git . cd agile-infrastructure-build-client-scripts . We need several pieces of information from our cloud host and 3rd party services for a successful build to be possible: . I am going to use the example of joomla to build from and so this example will build a virgin installation of the latest version of joomla . This will deploy the latest version of Joomla using template 1 which you can read about here with the clone you have just made onto your laptop: . ./agile-infrastructure-build-client-scripts/blob/master/templatedconfigurations/templates/exoscale/exoscale1.description and the hardcore method. . . To find the latest version of Joomla, I go to this URL in my browser: . Joomla Latest . And I note the latest version in a separate text file: . joomla_version=&quot;4.0.4&quot; . You can of course use a legacy version of joomla also by choosing a different version numnber. . . I then need a set of compute access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with compute access. In my separate text file, I record: . exoscale_access_key_compute=&quot;XXXXX&quot; where XXXXX and YYYYY are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_compute=&quot;YYYYY&quot; . I then need a set of Object Storage (S3) access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with S3 access. In my separate text file, I record: . exoscale_access_key_s3=&quot;AAAAA&quot; where AAAAA and BBBBB are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_s3=&quot;BBBBB&quot; . I then need a set of DNS access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with DNS access. In my separate text file, I record: . exoscale_access_key_dns=&quot;CCCCC&quot; where CCCCC and DDDDD are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_dns=&quot;DDDDD&quot; . NOTE: Alternatively you could generate one set of IAM keys and give that one set all three permissions, Compute, DNS and S3. You wouldn’t have to juggle three set of keys then and could use the same key pair in all three cases. . . You now need to make a note of the email address that you have registered with your exoscale account: . exoscale_email=&quot;testemail@testemail.com&quot; . . You then need the url that you want to use for your website. If you don’t have a DNS URL for your website, you need to purchase one and set the nameservers to exoscale as described in ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/Nameservers.md . exoscale_dns_name=&quot;www.testsocialnetwork.org.uk&quot; . . You then need the username and owner of you git provider application repositories. To do this, if you don’t have a git account sign up with one (in this case using github, but, you have the choice of bitbucket and gitlab as well) and record the username that you sign up with: . gitusername=&quot;mytestgituser&quot; . Then create a “personal access token” by following: . Personal Access Token making sure you give it all “repo” permissions . gitpersonalaccesstoken=&quot;KKKKK&quot; where KKKKK represents your actual personal access token . . To keep this as simple as possible, I have missed out the SMTP credentials, but, you can find out more about them ./agile-deployer/agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/DeployingSMTPService.md. If you wish to include SMTP credentials you will need to have a service offering set up with either sendpulse, mailjet or AWS SES. . So, that should be all the core credentials that I need to make a deployment. I can save my text file now (and keep it secure) because I might want to use these credentials again for other deployments or redeployments. . . . So, to begin an hardcore build process, I need to: . vi ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale1.tmpl . This file looks like this (I have put a dashes before each line I wish to modify for this deployment which is for illustrative purposes only): . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### export APPLICATION=&quot;&quot; export JOOMLA_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# export S3_ACCESS_KEY=&quot;&quot; #MANDATORY export S3_SECRET_KEY=&quot;&quot; #MANDATORY export S3_HOST_BASE=&quot;sos-ch-gva-2.exo.io&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For exoscale, this always needs to be set to &quot;US&quot; export TOKEN=&quot;&quot; #NOT REQUIRED export ACCESS_KEY=&quot;&quot; #MANDATORY export SECRET_KEY=&quot;&quot; #MANDATORY export DNS_USERNAME=&quot;&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export DNS_CHOICE=&quot;exoscale&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice export CLOUDHOST_EMAIL_ADDRESS=&quot;&quot; #MANDATORY export BUILDOS=&quot;debian&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;11&quot; #MANDATORY one of 20.04|10 11 export DEFAULT_USER=&quot;debian&quot; #MANDATORY - - This must be &quot;ubuntu&quot; if you are deploying ubuntu and &quot;debian&quot; if you are deploying debian export WEBSITE_DISPLAY_NAME=&quot;&quot; #MANDATORY export WEBSITE_NAME=&quot;&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_PROVIDER=&quot;github&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; export WEBSERVER_CHOICE=&quot;APACHE&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; export APPLICATION_IDENTIFIER=&quot;3&quot; export PHP_VERSION=&quot;7.4&quot; export REGION=&quot;&quot; export REGION_ID=&quot;1128bd56-b4d9-4ac6-a7b9-c715b187ce11&quot; export DB_SIZE=&quot;10G&quot; export DB_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export WS_SIZE=&quot;10G&quot; export WS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export AS_SIZE=&quot;10G&quot; export AS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export CLOUDHOST=&quot;exoscale&quot; export MACHINE_TYPE=&quot;EXOSCALE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; export CLOUDHOST_PASSWORD=&quot;&quot; export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;exoscale&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;/home/agile-deployer/agile-infrastructure-build-client-scripts&quot; export BUILD_CLIENT_IP=&quot;185.19.29.134&quot; export BUILD_IDENTIFIER=&quot;nuocial&quot; export PUBLIC_KEY_ID=&quot;AGILE_TOOLKIT_PUBLIC_KEY-nuocial&quot; . So, I have referred to the specification and I have freely chosen to modify the . WEBSERVER_CHOICE to “NGINX” PHP_VERSION to “8.0” APPLICATION_IDENTIFIER to “1” DATABASE_INSTALLATION_TYPE to “Postgres” . So, editing . vi ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale1.tmpl . and using the values I recorded in my text file earlier, I modify the file as follows, the lines beginning with dashes have been modified . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### export APPLICATION=&quot;joomla&quot; export JOOMLA_VERSION=&quot;4.0.4&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal -export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;JOOMLA:4.0.4&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# export S3_ACCESS_KEY=&quot;AAAAA&quot; #MANDATORY export S3_SECRET_KEY=&quot;BBBBB&quot; #MANDATORY export S3_HOST_BASE=&quot;sos-ch-gva-2.exo.io&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For exoscale, this always needs to be set to &quot;US&quot; export TOKEN=&quot;&quot; #NOT REQUIRED export ACCESS_KEY=&quot;XXXXX&quot; #MANDATORY export SECRET_KEY=&quot;YYYYY&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;CCCCC:DDDDD&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export DNS_CHOICE=&quot;exoscale&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export BUILDOS=&quot;debian&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;11&quot; #MANDATORY one of 20.04|10 11 export DEFAULT_USER=&quot;debian&quot; #MANDATORY - - This must be &quot;ubuntu&quot; if you are deploying ubuntu and &quot;debian&quot; if you are deploying debian export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_PROVIDER=&quot;github&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; export WEBSERVER_CHOICE=&quot;NGINX&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; export APPLICATION_IDENTIFIER=&quot;1&quot;** export PHP_VERSION=&quot;8.0&quot;** export REGION=&quot;&quot; export REGION_ID=&quot;1128bd56-b4d9-4ac6-a7b9-c715b187ce11&quot; export DB_SIZE=&quot;10G&quot; export DB_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export WS_SIZE=&quot;10G&quot; export WS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export AS_SIZE=&quot;10G&quot; export AS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export CLOUDHOST=&quot;exoscale&quot; export MACHINE_TYPE=&quot;EXOSCALE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; export CLOUDHOST_PASSWORD=&quot;&quot; export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;exoscale&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;/home/agile-deployer/agile-infrastructure-build-client-scripts&quot; export BUILD_CLIENT_IP=&quot;185.19.29.134&quot; export BUILD_IDENTIFIER=&quot;nuocial&quot; export PUBLIC_KEY_ID=&quot;AGILE_TOOLKIT_PUBLIC_KEY-nuocial&quot; . If all the dashes I have added are removed, then this file (with live values and not symbolic ones) would be ready for deployment. . You now need to copy your template as follows: . /bin/mkdir ./agile-infrastructure-build-client-scripts/overridescripts/ /bin/cp ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale1.tmpl ./agile-infrastructure-build-client-scripts/overridescripts/exoscale1override.tmpl . Then you need to run the script: . cd helperscripts . ./GenerateHardcoreUserDataScript.sh . This will leave you with a script: . ../userdatascripts/${userdatascript} . where ${userdatascript} is the descriptive name you gave when prompted. . It is mandatory to edit your userdata script and modify these values within it to your liking: . export BUILDMACHINE_USER=&quot;agile-user&quot; export BUILDMACHINE_PASSWORD=&quot;Hjdhfb34hd£&quot; #Make sure any password you choose is strong enough to pass any strength enforcement rules of your OS export BUILDMACHINE_SSH_PORT=&quot;1035&quot; export LAPTOP_IP=&quot;111.111.111.111&quot; . export SSH= &quot; &quot; #paste your public key here . . Now you have your userdata script take a copy of the entirity of it using copy and paste and then follow these instructions PASTING THE SCRIPT YOU HAVE JUST COPIED INTO THE USERDATA AREA OF YOUR EXOSCALE MACHINE INSTEAD OF THE MODIFIED TEMPLATE. The build machine will then install AND run the agile deployment toolkit. This is just an alternative method to the expedited build process which you may or may not perfer. . At this point, your build machine should be up and running. Please review . ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/TightenBuildMachineAccess.md. . At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Access” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . . Assuming that you have your Joomla application online now after following that video, what I would do if I wanted to build a Wordpress, Moodle or Drupal installation would be to follow the same procedure with the same template, but, minimally change the template as follows: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;WORDPRESS&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;2&quot; export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; #I don&#39;t support Wordpress using Postgres . For Drupal: . export APPLICATION=&quot;drupal&quot; export DRUPAL_VERSION=&quot;9.2.6&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;DRUPAL:9.2.6&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;3&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;MOODLE&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;4&quot; . So, you have a template now that you can use over and over again for deploying different installations of these CMS systems. You can study the spec and learn how to modify the template in order to change machine sizes, regions, PHP settings and so on. .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialshardcorevirgin/",
            "relUrl": "/adtexoscaletutorialshardcorevirgin/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "Exoscale ADT Tutorials Hardcore Temporal Joomla",
            "content": "YOU MUST HAVE THE MACHINES STILL RUNNING FROM THE PREVIOUS TUTORIAL TO COMPLETE THIS TUTORIAL SUCCESSFULLY . On your build machine, you need to now make temporal backups of your application sourcecode and your application database. You do this as follows: . cd /home/&lt;your username&gt;/agile-infrastructure-build-client-scripts/helperscripts . Then perform a temporal database backup . /bin/sh PerformDatabaseBackup.sh . Answering all of the questions and picking a periodicity, for example, HOURLY (make sure DISABLE_HOURLY=0) in your template . Then perform a temporal website sourcecode backup . /bin/sh PerformWebsiteBackup.sh . Making sure you pick the same periodicity as for the temporal database backup, for example, “HOURLY” . What we are then interested in is template 3 which is at: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale3.tmpl . I can extract the values for the following variables from template 1 or template 2 which I used in the previous tutorial and set them in template 3, replace these with your own live values: . export S3_ACCESS_KEY=&quot;AAAAA&quot; #MANDATORY export S3_SECRET_KEY=&quot;BBBBB&quot; #MANDATORY export ACCESS_KEY=&quot;XXXXX&quot; #MANDATORY export SECRET_KEY=&quot;YYYYY&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;CCCCC:DDDDD&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY . What I then do is adjust . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale3.tmpl . to contain these values instead of its defaults. . I then need to set the template to use the temporal backups that I have generated and I do that by setting these values in template3: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export BUILD_CHOICE=&quot;2&quot; #MANDATORY 2=hourly, 3=daily, 4=weekly, 5=monthly, 6=bimonthly export BUILD_ARCHIVE_CHOICE=&quot;hourly&quot; #MANDATORY hourly, daily, weekly, monthly, bimonthly export PERSIST_ASSETS_TO_CLOUD=&quot;1&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;images&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . Shutdown any webservers that you have running from tutorial 2 and you are then ready to perform a temporal build, as shown below: . You can make any other adjustments you want like if you want to choose APACHE instead of NGINX or change the size of the machines (you can find out about such things in the specification). . FOLLOW THESE STEPS ON YOUR LAPTOP IF YOU DON’T HAVE A BUILD SERVER RUNNING . You now need to copy your template as follows on your laptop: . /bin/cp ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl ./agile-infrastructure-build-client-scripts/overridescripts/exoscale2override.tmpl . Then you need to run the script: . cd helperscripts . ./GenerateHardcoreUserDataScript.sh . This will leave you with a script: . ../userdatascripts/${userdatascript} . where ${userdatascript} is the descriptive name you gave when prompted. . Now you have your userdata script take a copy of it using copy and paste and then follow [these](https://www.codebreakers.uk/adtexoscaletutorialsbuildmachinehardcore) instructions PASTING THE SCRIPT YOU HAVE JUST COPIED INTO THE USERDATA AREA OF YOUR EXOSCALE MACHINE INSTEAD OF THE MODIFIED TEMPLATE. The build machine will then install **AND** run the agile deployment toolkit. This is just an alternative method to the expedited build process which you may or may not perfer. . At this point, your build machine should be up and running. Please review ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/TightenBuildMachineAccess.md. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in &quot;Tightening Build Machine Access&quot; to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . IF YOU DO HAVE A BUILD SERVER RUNNING FROM A PREVIOUS BUILD, THEN JUST DO THE FOLLOWING . If all has gone according to plan, you will have seen a full deployment of your temporal backup. . . DEPLOYMENT USING MANAGED DATABASES . There’s something else to be aware of, if you want to deploy a managed DBaaS system instead of just using the one that is built in to the build process you can do that as detailed in this and this document . . DEPLOYMENT USING SNAPSHOTS . You can also build your webservers using snapshots that you generate and then use. You can read about how to perform snapshot builds here. . . OTHER APPLICATION TYPES . In order to do a temporaly build from backups you have made for a different application type (wordpress, drupal or moodle) you will need to alter the following variables in your template compared to what you have used above: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export DIRECTORIES_TO_MOUNT=&quot;wp-content.uploads&quot; . For Drupal: . export APPLICATION=&quot;drupal&quot; export DIRECTORIES_TO_MOUNT=&quot;sites.default.files&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export DIRECTORIES_TO_MOUNT=&quot;moodledata.filedir&quot; .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialshardcoretemporal/",
            "relUrl": "/adtexoscaletutorialshardcoretemporal/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "Exoscale ADT Tutorials Hardcore Baseline Joomla",
            "content": "HARDCORE BUILD PROCESS . If you have followed the tutorial here, then you will have an active Joomla, or possibly Wordpress, Drupal or Moodle installation active through your web browser. If you are using a baseline that someone else has developed or a baseline that you developed some time ago, then you might not have servers running yet. . What you need to do now is to customise your version of (Joomla) so that it is a specialised application for example a blog or a social network and so on. . What I have done for this tutorial is install a very simple application using a tool called “Community Builder” which you can find here: Community Builder. Literally all I have done is install the latest version (at the time) into my Joomla installation that I installed earlier. . The next thing I have to do is to generate a baseline of my application so that the baseline can be redeployed. A baseline is stored with whatever git provider you have set in your template when you made your deployment. In my case my git account is my “adt-demos” account with Github. . In order to create the baseline I am going to deploy, I need to do the following: . Choose a unique identifier for my baseline repositories, in this case I am going to call them, “communitybuilder” yours will be a different name. | Go to you git provider account console with your browser, in this case it is my “adt-demos” account with Github and create two private repositories: | communitybuilder-webroot-sourcecode-baseline communitybuilder-db-baseline . Once these two repositories have been created you are ready to make a baseline of the joomla install that you have modified. . To generate your baseline, you have to run two commands on your build machine. At the command prompt of your build machine cd into the helperscripts directory of your agile deployment toolkit installation. In my case it is like this: | cd /home/agile-deployer/agile-infrastructure-build-client-scripts/helperscripts . Once you are in that directory, you need to issue the command: . /bin/sh PerformWebsiteBaseline.sh . Once that starts running, you need to answer the questions you are prompted for entering, “communitybuilder” if you are prompted for an identifier. . In a minute or two your webiste baseline will have been generated and you should check in its repository that sourceode has been generated to it. . Now you need to generate a baseline of the database. To do that you need to issue the command: . /bin/sh PerformDatabaseBaseline.sh . If there is a prompt for an identifier, I enter “communitybuilder” and make very sure that the repository communitybuilder-db-baseline exists . In short order, my database is backed up to the Github repository and again, I should check that the repository I have chosen has been updated using the github console. . . My application baselines are now complete. The process for generating baselines is the same whichever application type you have built, Joomla, Wordpress, Drupal or Moodle. . The next step is to make a deployment of these baselines. So, if I have any webservers or databases running with my cloudhost, I need to take them off line (shut them down) and destroy them. . I am then interested in template 2 because that is the template that is used for deploying baselined application. If its not clear, template 1 is used for virgin CMS deployments, template 2 is used for baselined application deployments and template 3 is used for temporal deployments. . So, template 2 is located here on my build machine: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl . I can copy the credentials that I need from the values that I set them to previously in template1. So, looking in template1 if it is available from a previous build, . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale1.tmpl . I can extract the values for the following variables: . export S3_ACCESS_KEY=&quot;AAAAA&quot; #MANDATORY export S3_SECRET_KEY=&quot;BBBBB&quot; #MANDATORY export ACCESS_KEY=&quot;XXXXX&quot; #MANDATORY export SECRET_KEY=&quot;YYYYY&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;CCCCC:DDDDD&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY . What I then do is adjust . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl . to contain these values instead of its defaults. . With that done, because I used “Postgres” which from the file dbe.dat in the webroot of my baseline when I deployed Joomla originally, I need to make sure that I set the database to use as follows: . export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; . There are some other values that I need to change in /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl, as follows: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export APPLICATION_IDENTIFIER=&quot;1&quot; #MANDATORY (1 for joomla, 2 for wordpress, 3 for drupal, 4 for moodle) export BASELINE_DB_REPOSITORY=&quot;communitybuilder-db-baseline&quot; #MANDATORY export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;communitybuilder-webroot-sourcecode-baseline&quot; #MANDATORY export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . You can make any other adjustments you want like if you want to choose APACHE instead of NGINX or change the size of the machines (you can find out about such things in the specification). . FOLLOW THESE STEPS ON YOUR LAPTOP IF YOU DON’T HAVE A BUILD SERVER RUNNING . You now need to copy your template as follows on your laptop: . /bin/cp ./agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl ./agile-infrastructure-build-client-scripts/overridescripts/exoscale2override.tmpl . Then you need to run the script: . cd helperscripts . ./GenerateHardcoreUserDataScript.sh . This will leave you with a script: . ../userdatascripts/${userdatascript} . where ${userdatascript} is the descriptive name you gave when prompted. . It is mandatory to edit your userdata script and modify these values within it to your liking: . export BUILDMACHINE_USER=&quot;agile-user&quot; export BUILDMACHINE_PASSWORD=&quot;Hjdhfb34hd£&quot; #Make sure any password you choose is strong enough to pass any strength enforcement rules of your OS export BUILDMACHINE_SSH_PORT=&quot;1035&quot; export LAPTOP_IP=&quot;111.111.111.111&quot; . export SSH= &quot; &quot; #paste your public key here . Now you have your userdata script take a copy of it using copy and paste and then follow [these](https://www.codebreakers.uk/adtexoscaletutorialsbuildmachinehardcore) instructions PASTING THE SCRIPT YOU HAVE JUST COPIED INTO THE USERDATA AREA OF YOUR EXOSCALE MACHINE INSTEAD OF THE MODIFIED TEMPLATE. The build machine will then install **AND** run the agile deployment toolkit. This is just an alternative method to the expedited build process which you may or may not perfer. . At this point, your build machine should be up and running. Please review ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/TightenBuildMachineAccess.md. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in &quot;Tightening Build Machine Access&quot; to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . IF YOU DO HAVE A BUILD SERVER RUNNING FROM A PREVIOUS BUILD, THEN JUST DO THE FOLLOWING . If you follow these steps, then, you will have a copy of your customised Joomla application running in the cloud. Leave the servers you have deployed running for use in the next tutorial in the series. .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialshardcorebaseline/",
            "relUrl": "/adtexoscaletutorialshardcorebaseline/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "Exoscale ADT Tutorials Full Build",
            "content": "PREBUILD NECESSITIES . If you don’t already have a build machine running in the Exoscale cloud, follow these steps to get ready for the main build) . Begin by following this: Build Machine Setup . | At this point, your build machine should be up and running. Please review Tightening Build Machine Firewall. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Firewall” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . | . FULL BUILD PROCESS . To begin with you will need to have prepared, as a mimimum, for a Joomla interactive build the following information: . To find the latest version of Joomla, I go to this URL in my browser: . Joomla Latest . And I note the latest version in a separate text file: . joomla_version=&quot;4.0.4&quot; . You can of course use a legacy version of joomla also by choosing a different version numnber. . . I then need a set of compute access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with compute access. In my separate text file, I record: . exoscale_access_key_compute=&quot;XXXXX&quot; where XXXXX and YYYYY are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_compute=&quot;YYYYY&quot; . I then need a set of Object Storage (S3) access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with S3 access. In my separate text file, I record: . exoscale_access_key_s3=&quot;AAAAA&quot; where AAAAA and BBBBB are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_s3=&quot;BBBBB&quot; . I then need a set of DNS access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with DNS access. In my separate text file, I record: . exoscale_access_key_dns=&quot;CCCCC&quot; where CCCCC and DDDDD are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_dns=&quot;DDDDD&quot; . NOTE: Alternatively you could generate one set of IAM keys and give that one set all three permissions, Compute, DNS and S3. You wouldn’t have to juggle three set of keys then and could use the same key pair in all three cases. . . You now need to make a note of the email address that you have registered with your exoscale account: . exoscale_email=&quot;testemail@testemail.com&quot; . . You then need the url that you want to use for your website. If you don’t have a DNS URL for your website, you need to purchase one and set the nameservers to exoscale as described in ./agile-infrastructure-build-client-scripts/blob/master/doco/AgileToolkitDeployment/Nameservers.md . exoscale_dns_name=&quot;www.testsocialnetwork.org.uk&quot; . . You then need the username and owner of you git provider application repositories. To do this, if you don’t have a git account sign up with one (in this case using github, but, you have the choice of bitbucket and gitlab as well) and record the username that you sign up with: . gitusername=&quot;mytestgituser&quot; . Then create a “personal access token” by following: . Personal Access Token making sure you give it all “repo” permissions . gitpersonalaccesstoken=&quot;KKKKK&quot; where KKKKK represents your actual personal access token . . THE ACTUAL BUILD . The full build process is interactive and guided so you need to answer the questions it posits when it posits them to perform a full build: . ssh onto the build machine you started in 1. from your laptop. . cd /home/&lt;username&gt;/agile-infrastructure-build-client-scripts/ . /bin/sh AgileDeploymentToolkit.sh . Once you run this script you will prompted to enter various credentials as required. .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsfullbuild/",
            "relUrl": "/adtexoscaletutorialsfullbuild/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "Exoscale ADT Tutorials Expedited Virgin",
            "content": "PREBUILD NECESSITIES . If you don’t already have a build machine running in the Exoscale cloud, follow these steps to get ready for the main build) . Begin by following this: Build Machine Setup . | At this point, your build machine should be up and running. Please review Tightening Build Machine Firewall. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Firewall” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . | . EXPEDITED BUILD PROCESS . This will deploy the latest version of Joomla using template 1 which you can read about here: template 1 and the expedited method. . If you have followed these steps your build machine is online and secured and you have an SSH session open to it from your laptop through which to initiate your build processes. . We need several pieces of information from our cloud host and 3rd party services for a successful build to be possible: . I am going to use the example of joomla to build from and so this example will build a virgin installation of the latest version of joomla . . To find the latest version of Joomla, I go to this URL in my browser: . Joomla Latest . And I note the latest version in a separate text file: . joomla_version=&quot;4.0.4&quot; . You can of course use a legacy version of joomla also by choosing a different version numnber. . . I then need a set of compute access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with compute access. In my separate text file, I record: . exoscale_access_key_compute=&quot;XXXXX&quot; where XXXXX and YYYYY are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_compute=&quot;YYYYY&quot; . I then need a set of Object Storage (S3) access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with S3 access. In my separate text file, I record: . exoscale_access_key_s3=&quot;AAAAA&quot; where AAAAA and BBBBB are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_s3=&quot;BBBBB&quot; . I then need a set of DNS access keys so, I go to the IAM option on my exoscale dashboard and generate an IAM key with DNS access. In my separate text file, I record: . exoscale_access_key_dns=&quot;CCCCC&quot; where CCCCC and DDDDD are the actual values generated when I click &quot;Add Key&quot; exoscale_secret_key_dns=&quot;DDDDD&quot; . NOTE: Alternatively you could generate one set of IAM keys and give that one set all three permissions, Compute, DNS and S3. You wouldn’t have to juggle three set of keys then and could use the same key pair in all three cases. . . You now need to make a note of the email address that you have registered with your exoscale account: . exoscale_email=&quot;testemail@testemail.com&quot; . . You then need the url that you want to use for your website. If you don’t have a DNS URL for your website, you need to purchase one and set the nameservers to exoscale as described here . exoscale_dns_name=&quot;www.testsocialnetwork.org.uk&quot; . . You then need the username and owner of you git provider application repositories. To do this, if you don’t have a git account sign up with one (in this case using github, but, you have the choice of bitbucket and gitlab as well) and record the username that you sign up with: . gitusername=&quot;mytestgituser&quot; . Then create a “personal access token” by following: . Personal Access Token making sure you give it all “repo” permissions . gitpersonalaccesstoken=&quot;KKKKK&quot; where KKKKK represents your actual personal access token . . To keep this as simple as possible, I have missed out the SMTP credentials, but, you can find out more about them here. If you wish to include SMTP credentials you will need to have a service offering set up with either sendpulse, mailjet or AWS SES. . So, that should be all the core credentials that I need to make a deployment. I can save my text file now (and keep it secure) because I might want to use these credentials again for other deployments or redeployments. . . . So, at the command line of my build machine that we spun up earlier: . My chosen username is “agile-deployer” . So, to begin an expedited build process, I need to: . cd /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale . Then we can open up the . vi exoscale1.tmpl . This file looks like this (I have put a dashes before each line I wish to modify for this deployment which is for illustrative purposes only): . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### export APPLICATION=&quot;&quot; export JOOMLA_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# export S3_ACCESS_KEY=&quot;&quot; #MANDATORY export S3_SECRET_KEY=&quot;&quot; #MANDATORY export S3_HOST_BASE=&quot;sos-ch-gva-2.exo.io&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For exoscale, this always needs to be set to &quot;US&quot; export TOKEN=&quot;&quot; #NOT REQUIRED export ACCESS_KEY=&quot;&quot; #MANDATORY export SECRET_KEY=&quot;&quot; #MANDATORY export DNS_USERNAME=&quot;&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export DNS_CHOICE=&quot;exoscale&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice export CLOUDHOST_EMAIL_ADDRESS=&quot;&quot; #MANDATORY export BUILDOS=&quot;debian&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;11&quot; #MANDATORY one of 20.04|10 11 export DEFAULT_USER=&quot;debian&quot; #MANDATORY - - This must be &quot;ubuntu&quot; if you are deploying ubuntu and &quot;debian&quot; if you are deploying debian export WEBSITE_DISPLAY_NAME=&quot;&quot; #MANDATORY export WEBSITE_NAME=&quot;&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_PROVIDER=&quot;github&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; export WEBSERVER_CHOICE=&quot;APACHE&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; export APPLICATION_IDENTIFIER=&quot;3&quot; export PHP_VERSION=&quot;7.4&quot; export REGION=&quot;&quot; export REGION_ID=&quot;1128bd56-b4d9-4ac6-a7b9-c715b187ce11&quot; export DB_SIZE=&quot;10G&quot; export DB_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export WS_SIZE=&quot;10G&quot; export WS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export AS_SIZE=&quot;10G&quot; export AS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export CLOUDHOST=&quot;exoscale&quot; export MACHINE_TYPE=&quot;EXOSCALE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; export CLOUDHOST_PASSWORD=&quot;&quot; export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;exoscale&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;/home/agile-deployer/agile-infrastructure-build-client-scripts&quot; export BUILD_CLIENT_IP=&quot;185.19.29.134&quot; export BUILD_IDENTIFIER=&quot;nuocial&quot; export PUBLIC_KEY_ID=&quot;AGILE_TOOLKIT_PUBLIC_KEY-nuocial&quot; . So, I have referred to the specification and I have freely chosen to modify the . WEBSERVER_CHOICE to “NGINX” PHP_VERSION to “8.0” APPLICATION_IDENTIFIER to “1” DATABASE_INSTALLATION_TYPE to “Postgres” . So, editing /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale1.tmpl and using the values I recorded in my text file earlier, I modify the file as follows, the lines beginning with dashes have been modified . ############################################################################################### # Refer to: ${BUILD_HOME}/templatedconfigurations/specification.md ############################################################################################### export APPLICATION=&quot;joomla&quot; export JOOMLA_VERSION=&quot;4.0.4&quot; #MANDATORY - change this to the version you want to deploy, for example 4.0.3 set it to &quot;&quot; if you are deploying anything but joomla export DRUPAL_VERSION=&quot;&quot; #MANDATORY - change this to the version you want to deploy, for example, 9.2.6 set it to &quot;&quot; if you are deploying anything but drupal -export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;JOOMLA:4.0.4&quot; #MANDATORY #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # change this to, for example, JOOMLA:4.0.3 if you are deploying drupal (APPLICATION=joomla) # change this to, WORDPRESS if you are deploying wordpress # change this to, for example, DRUPAL:9.2.6 if you are deploying drupal (APPLICATION=drupal) # change this to, MOODLE if you are deploying moodle ############################################################################################# export S3_ACCESS_KEY=&quot;AAAAA&quot; #MANDATORY export S3_SECRET_KEY=&quot;BBBBB&quot; #MANDATORY export S3_HOST_BASE=&quot;sos-ch-gva-2.exo.io&quot; #MANDATORY export S3_LOCATION=&quot;US&quot; #For exoscale, this always needs to be set to &quot;US&quot; export TOKEN=&quot;&quot; #NOT REQUIRED export ACCESS_KEY=&quot;XXXXX&quot; #MANDATORY export SECRET_KEY=&quot;YYYYY&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;CCCCC:DDDDD&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export DNS_CHOICE=&quot;exoscale&quot; #MANDATORY - you will need to set your DNS nameservers according to this choice export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export BUILDOS=&quot;debian&quot; #MANDATORY one of ubuntu|debian export BUILDOS_VERSION=&quot;11&quot; #MANDATORY one of 20.04|10 11 export DEFAULT_USER=&quot;debian&quot; #MANDATORY - - This must be &quot;ubuntu&quot; if you are deploying ubuntu and &quot;debian&quot; if you are deploying debian export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_PROVIDER=&quot;github&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_PASSWORD=&quot;&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY export SYSTEM_EMAIL_PROVIDER=&quot;&quot; #MANDATORY export SYSTEM_TOEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_FROMEMAIL_ADDRESS=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_USERNAME=&quot;&quot; #MANDATORY export SYSTEM_EMAIL_PASSWORD=&quot;&quot; #MANDATORY export DIRECTORIES_TO_MOUNT=&quot;&quot; #This should always be unset for a virgin deployments export DB_PORT=&quot;2035&quot; export SSH_PORT=&quot;1035&quot; export GATEWAY_GUARDIAN=&quot;0&quot; export PRODUCTION=&quot;0&quot; export DEVELOPMENT=&quot;1&quot; export BUILD_CHOICE=&quot;0&quot; export WEBSERVER_CHOICE=&quot;NGINX&quot; export NO_AUTOSCALERS=&quot;1&quot; export NUMBER_WS=&quot;1&quot; export SUPERSAFE_WEBROOT=&quot;1&quot; export SUPERSAFE_DB=&quot;1&quot; export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #This should always be set to 0 for a virgin deployment export DISABLE_HOURLY=&quot;0&quot; export SERVER_TIMEZONE_CONTINENT=&quot;Europe&quot; export SERVER_TIMEZONE_CITY=&quot;London&quot; export BASELINE_DB_REPOSITORY=&quot;VIRGIN&quot; export BUILD_ARCHIVE_CHOICE=&quot;virgin&quot; export APPLICATION_LANGUAGE=&quot;PHP&quot; export APPLICATION_IDENTIFIER=&quot;1&quot;** export PHP_VERSION=&quot;8.0&quot;** export REGION=&quot;&quot; export REGION_ID=&quot;1128bd56-b4d9-4ac6-a7b9-c715b187ce11&quot; export DB_SIZE=&quot;10G&quot; export DB_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export WS_SIZE=&quot;10G&quot; export WS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export AS_SIZE=&quot;10G&quot; export AS_SERVER_TYPE=&quot;b6cd1ff5-3a2f-4e9d-a4d1-8988c1191fe8&quot; export CLOUDHOST=&quot;exoscale&quot; export MACHINE_TYPE=&quot;EXOSCALE&quot; export ALGORITHM=&quot;rsa&quot; export USER=&quot;root&quot; export CLOUDHOST_USERNAME=&quot;root&quot; export CLOUDHOST_PASSWORD=&quot;&quot; export PUBLIC_KEY_NAME=&quot;AGILE_TOOLKIT_PUBLIC_KEY&quot; export PREVIOUS_BUILD_CONFIG=&quot;0&quot; export GIT_USER=&quot;Templated User&quot; export GIT_EMAIL_ADDRESS=&quot;templateduser@dummyemailZ123.com&quot; export INFRASTRUCTURE_REPOSITORY_PROVIDER=&quot;github&quot; export INFRASTRUCTURE_REPOSITORY_OWNER=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_USERNAME=&quot;agile-deployer&quot; export INFRASTRUCTURE_REPOSITORY_PASSWORD=&quot;none&quot; export DATASTORE_CHOICE=&quot;exoscale&quot; export SSL_GENERATION_METHOD=&quot;AUTOMATIC&quot; export SSL_GENERATION_SERVICE=&quot;LETSENCRYPT&quot; export BYPASS_DB_LAYER=&quot;0&quot; export DBaaS_HOSTNAME=&quot;&quot; export DBaaS_USERNAME=&quot;&quot; export DBaaS_PASSWORD=&quot;&quot; export DBaaS_DBNAME=&quot;&quot; export DATABASE_DBaaS_INSTALLATION_TYPE=&quot;&quot; export DBaaSDBSECURITYGROUP=&quot;&quot; export DBIP=&quot;&quot; export DBIP_PRIVATE=&quot;&quot; export WSIP=&quot;&quot; export WSIP_PRIVATE=&quot;&quot; export ASIP=&quot;&quot; export ASIP_PRIVATE=&quot;&quot; export APPLICATION_NAME=&quot;&quot; export MAPS_API_KEY=&quot;&quot; export PHP_MODE=&quot;&quot; export PHP_MAX_CHILDREN=&quot;&quot; export PHP_START_SERVERS=&quot;&quot; export PHP_MIN_SPARE_SERVERS=&quot;&quot; export PHP_MAX_SPARE_SERVERS=&quot;&quot; export PHP_PROCESS_IDLE_TIMEOUT=&quot;&quot; export IN_MEMORY_CACHING=&quot;&quot; export IN_MEMORY_CACHING_PORT=&quot;&quot; export IN_MEMORY_CACHING_HOST=&quot;&quot; export IN_MEMORY_CACHING_SECURITY_GROUP=&quot;&quot; export ENABLE_EFS=&quot;&quot; export SUBNET_ID=&quot;&quot; export AUTOSCALE_FROM_SNAPSHOTS=&quot;&quot; export GENERATE_SNAPSHOTS=&quot;&quot; export SNAPSHOT_ID=&quot;&quot; export WEBSERVER_IMAGE_ID=&quot;&quot; export AUTOSCALER_IMAGE_ID=&quot;&quot; export DATABASE_IMAGE_ID=&quot;&quot; export BUILD_HOME=&quot;/home/agile-deployer/agile-infrastructure-build-client-scripts&quot; export BUILD_CLIENT_IP=&quot;185.19.29.134&quot; export BUILD_IDENTIFIER=&quot;nuocial&quot; export PUBLIC_KEY_ID=&quot;AGILE_TOOLKIT_PUBLIC_KEY-nuocial&quot; . If all the dashes I have added are removed, then this file (with live values and not symbolic ones) would be ready for deployment. . . You should now be at a point where your build machine is running and configured ready to deploy Joomla in a virgin (or uncustomised) configuration. I will show you what this will likely look like in a video: . . Assuming that you have your Joomla application online now after following that video, what I would do if I wanted to build a Wordpress, Moodle or Drupal installation would be to follow the same procedure with the same template, but, minimally change the template as follows: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;WORDPRESS&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;2&quot; export DATABASE_INSTALLATION_TYPE=&quot;MySQL&quot; #I don&#39;t support Wordpress using Postgres . For Drupal: . export APPLICATION=&quot;drupal&quot; export DRUPAL_VERSION=&quot;9.2.6&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;DRUPAL:9.2.6&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;3&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;MOODLE&quot; #MANDATORY export APPLICATION_IDENTIFIER=&quot;4&quot; . So, you have a template now that you can use over and over again for deploying different installations of these CMS systems. You can study the spec and learn how to modify the template in order to change machine sizes, regions, PHP settings and so on. .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsexpeditedvirgin/",
            "relUrl": "/adtexoscaletutorialsexpeditedvirgin/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "Exoscale ADT Tutorials Expedited Temporal Joomla",
            "content": "YOU MUST HAVE THE MACHINES STILL RUNNING FROM THE PREVIOUS TUTORIAL TO COMPLETE THIS TUTORIAL SUCCESSFULLY . On your build machine, you need to now make temporal backups of your application sourcecode and your application database. You do this as follows: . cd /home/&lt;your username&gt;/agile-infrastructure-build-client-scripts/helperscripts . Then perform a temporal database backup . /bin/sh PerformDatabaseBackup.sh . Answering all of the questions and picking a periodicity, for example, HOURLY (make sure DISABLE_HOURLY=0) in your template . Then perform a temporal website sourcecode backup . /bin/sh PerformWebsiteBackup.sh . Making sure you pick the same periodicity as for the temporal database backup, for example, “HOURLY” . What we are then interested in is template 3 which is at: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale3.tmpl . I can extract the values for the following variables from template 1 or template 2 which I used in the previous tutorial and set them in template 3, replace these with your own live values: . export S3_ACCESS_KEY=&quot;AAAAA&quot; #MANDATORY export S3_SECRET_KEY=&quot;BBBBB&quot; #MANDATORY export ACCESS_KEY=&quot;XXXXX&quot; #MANDATORY export SECRET_KEY=&quot;YYYYY&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;CCCCC:DDDDD&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY . What I then do is adjust . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale3.tmpl . to contain these values instead of its defaults. . I then need to set the template to use the temporal backups that I have generated and I do that by setting these values in template3: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export BUILD_CHOICE=&quot;2&quot; #MANDATORY 2=hourly, 3=daily, 4=weekly, 5=monthly, 6=bimonthly export BUILD_ARCHIVE_CHOICE=&quot;hourly&quot; #MANDATORY hourly, daily, weekly, monthly, bimonthly export PERSIST_ASSETS_TO_CLOUD=&quot;1&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;images&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . Shutdown any webservers that you have running from tutorial 2 and you are then ready to perform a temporal build, as shown below: . If all has gone according to plan, you will have seen a full deployment of your temporal backup. . . DEPLOYMENT USING MANAGED DATABASES . There’s something else to be aware of, if you want to deploy a managed DBaaS system instead of just using the one that is built in to the build process you can do that as detailed in this and this document . . DEPLOYMENT USING SNAPSHOTS . You can also build your webservers using snapshots that you generate and then use. You can read about how to perform snapshot builds here. . . OTHER APPLICATION TYPES . In order to do a temporaly build from backups you have made for a different application type (wordpress, drupal or moodle) you will need to alter the following variables in your template compared to what you have used above: . For Wordpress: . export APPLICATION=&quot;wordpress&quot; export DIRECTORIES_TO_MOUNT=&quot;wp-content.uploads&quot; . For Drupal: . export APPLICATION=&quot;drupal&quot; export DIRECTORIES_TO_MOUNT=&quot;sites.default.files&quot; . For Moodle: . export APPLICATION=&quot;moodle&quot; export DIRECTORIES_TO_MOUNT=&quot;moodledata.filedir&quot; .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsexpeditedtemporal/",
            "relUrl": "/adtexoscaletutorialsexpeditedtemporal/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "Exoscale ADT Tutorials Expedited Baseline Joomla",
            "content": "PREBUILD NECESSITIES . If you don’t already have a build machine running in the Exoscale cloud, follow these steps to get ready for the main build) . Begin by following this: Build Machine Setup . | At this point, your build machine should be up and running. Please review Tightening Build Machine Firewall. At this point, your build machine will only accept connections from your laptop. If you need access from other ip addresses you need to use the technique described in “Tightening Build Machine Firewall” to grant access to additional IP addresses. This will be the case every time your laptop changes its IP address as you travel about, so, you might want to setup and configure an S3 client on your laptop to enable you to grant access to new IP addresses easily. . | . EXPEDITED BUILD PROCESS . If you have followed the tutorial here, then you will have an active Joomla, or possibly Wordpress, Drupal or Moodle installation active through your web browser. What you need to do now is to customise your version of (Joomla) so that it is a specialised application for example a blog or a social network and so on. . What I have done for this tutorial is install a very simple application using a tool called “Community Builder” which you can find here: Community Builder. Literally all I have done is install the latest version (at the time) into my Joomla installation that I installed earlier. . The next thing I have to do is to generate a baseline of my application so that the baseline can be redeployed. A baseline is stored with whatever git provider you have set in your template when you made your deployment. In my case my git account is my “adt-demos” account with Github. . In order to create the baseline I am going to deploy, I need to do the following: . Choose a unique identifier for my baseline repositories, in this case I am going to call them, “communitybuilder” yours will be a different name. | Go to you git provider account console with your browser, in this case it is my “adt-demos” account with Github and create two private repositories: | communitybuilder-webroot-sourcecode-baseline communitybuilder-db-baseline . Once these two repositories have been created you are ready to make a baseline of the joomla install that you have modified. . To generate your baseline, you have to run two commands on your build machine. At the command prompt of your build machine cd into the helperscripts directory of your agile deployment toolkit installation. In my case it is like this: | cd /home/agile-deployer/agile-infrastructure-build-client-scripts/helperscripts . Once you are in that directory, you need to issue the command: . /bin/sh PerformWebsiteBaseline.sh . Once that starts running, you need to answer the questions you are prompted for entering, “communitybuilder” if you are prompted for an identifier. . In a minute or two your webiste baseline will have been generated and you should check in its repository that sourceode has been generated to it. . Now you need to generate a baseline of the database. To do that you need to issue the command: . /bin/sh PerformDatabaseBaseline.sh . If there is a prompt for an identifier, I enter “communitybuilder” and make very sure that the repository communitybuilder-db-baseline exists . In short order, my database is backed up to the Github repository and again, I should check that the repository I have chosen has been updated using the github console. . . My application baselines are now complete. The process for generating baselines is the same whichever application type you have built, Joomla, Wordpress, Drupal or Moodle. . The next step is to make a deployment of these baselines. So, if I have any webservers or databases running with my cloudhost, I need to take them off line (shut them down) and destroy them. . I am then interested in template 2 because that is the template that is used for deploying baselined application. If its not clear, template 1 is used for virgin CMS deployments, template 2 is used for baselined application deployments and template 3 is used for temporal deployments. . So, template 2 is located here on my build machine: . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl . I can copy the credentials that I need from the values that I set them to previously in template1. So, looking in template1, . /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale1.tmpl . I can extract the values for the following variables: . export S3_ACCESS_KEY=&quot;AAAAA&quot; #MANDATORY export S3_SECRET_KEY=&quot;BBBBB&quot; #MANDATORY export ACCESS_KEY=&quot;XXXXX&quot; #MANDATORY export SECRET_KEY=&quot;YYYYY&quot; #MANDATORY export DNS_USERNAME=&quot;testemail@testemail.com&quot; #MANDATORY export DNS_SECURITY_KEY=&quot;CCCCC:DDDDD&quot; #MANDATORY - This is your access key and your secret key, written: DNS_SECURITY_KEY=&quot;${ACCESS_KEY}:${SECRET_KEY}&quot; export CLOUDHOST_EMAIL_ADDRESS=&quot;testemail@testemail.com&quot; #MANDATORY export WEBSITE_DISPLAY_NAME=&quot;Test Social Network&quot; #MANDATORY export WEBSITE_NAME=&quot;testsocialnetwork&quot; #MANDATORY - This is the exact value of the core of your WEBSITE_URL, for example, www.nuocial.org.uk would be nuocial export WEBSITE_URL=&quot;www.testsocialnetwork.org.uk&quot; #MANDATORY export APPLICATION_REPOSITORY_OWNER=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_USERNAME=&quot;mytestgituser&quot; #MANDATORY export APPLICATION_REPOSITORY_TOKEN=&quot;KKKKK&quot; #MANDATORY . What I then do is adjust /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl to contain these values instead of its defaults. . With that done, because I used “Postgres” which from the file dbe.dat in the webroot of my baseline when I deployed Joomla originally, I need to make sure that I set the database to use as follows: . export DATABASE_INSTALLATION_TYPE=&quot;Postgres&quot; . There are some other values that I need to change in /home/agile-deployer/agile-infrastructure-build-client-scripts/templatedconfigurations/templates/exoscale/exoscale2.tmpl, as follows: . export APPLICATION=&quot;joomla&quot; #MANDATORY (joomla or wordpress or drupal or moodle) export APPLICATION_IDENTIFIER=&quot;1&quot; #MANDATORY (1 for joomla, 2 for wordpress, 3 for drupal, 4 for moodle) export BASELINE_DB_REPOSITORY=&quot;communitybuilder-db-baseline&quot; #MANDATORY export APPLICATION_BASELINE_SOURCECODE_REPOSITORY=&quot;communitybuilder-webroot-sourcecode-baseline&quot; #MANDATORY export PERSIST_ASSETS_TO_CLOUD=&quot;0&quot; #MANDATORY This should only be 0 if your application has a very small number of assets export DIRECTORIES_TO_MOUNT=&quot;&quot; #MANDATORY - this will define which directories in your webroot will be mounted from S3, if PERSIST_ASSETS_TO_CLOUD=1 . You can make any other adjustments you want like if you want to choose APACHE instead of NGINX or change the size of the machines (you can find out about such things in the specification). . With your baseline template fully configured, you are now ready to perform a baseline build (in other words, directly install a live application starting from zilch). That will look something like the following: . If you follow these steps, then, you will have a copy of your customised Joomla application running in the cloud. Leave the servers you have deployed running for use in the next tutorial in the series. .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsexpeditedbaseline/",
            "relUrl": "/adtexoscaletutorialsexpeditedbaseline/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "Exoscale ADT Tutorials Build Machine Method",
            "content": "PRE BUILD PREPARATIONS FOR HARDCORE BUILDS: . 1) If you don’t have an SSH key pair or if you want a specific SSH key pair for your builds, issue the following command: .     . /usr/bin/ssh-keygen -t rsa .     . Your key will be saved to the indicated file, for example, /root/.ssh/id_rsa your path might be different such as /home/bob/.ssh/id_rsa . Issue the command (for example) .     . /bin/cat /root/.ssh/id_rsa.pub - this will be your &lt;ssh-public-key-substance&gt; .     This will give you your public key which you need later so, take a copy of the output that is printed to the screen. .       . . 2) Take on your laptop, take a copy of your userdata script that you should have previously generated from . ${BUILD_HOME}/agile-infrastructure-build-client-scripts/userdatascripts/${userdatascript}) . where ${userdatascript} is the name you have given to your userdata script. .       . . 3) If you look into the script that you made a copy of in 2, you need to populate the following variables in your copy: .     . export BUILDMACHINE_USER=&quot;&quot; export BUILDMACHINE_PASSWORD=&quot;&quot; export BUILDMACHINE_SSH_PORT=&quot;&quot; export LAPTOP_IP=&quot;&quot; . export SSH= &quot; &quot; .     Now you need to decide on a username for your build machine, a password for your build machine, a port for your build machine’s ssh system and the IP address of your desktop or laptop. . If I decide on a username of “agile-deployer” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_USER=&quot;agile-deployer&quot; .     . If I decide on a password of “QQQPPPZZZMMM123098” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_PASSWORD=&quot;QQQPPPZZZMMM123098&quot; .     . If you decide on an SSH_PORT of “1035” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_SSH_PORT=&quot;1035&quot; .     . You need to give the script your laptop IP address. You can do this by going to https://www.whatsmyip.com and so, if your ip address is: “111.111.111.111” and pasting your ip address into your copy as follows: .     . export LAPTOP_IP=&quot;111.111.111.111&quot; .     . The public ssh key that you took a copy of in 1 needs to be pasted as follows: .     . export SSH= &quot;&lt;ssh-public-key-substance&gt; &quot; .     . The top part of the copy that you made in 2 will now look like this: .     . #!/bin/bash /bin/mkdir /root/logs OUT_FILE=&quot;webserver-build-out-`/bin/date | /bin/sed &#39;s/ //g&#39;`&quot; exec 1&gt;&gt;/root/logs/${OUT_FILE} ERR_FILE=&quot;webserver-build-err-`/bin/date | /bin/sed &#39;s/ //g&#39;`&quot; exec 2&gt;&gt;/root/logs/${ERR_FILE} ############################################################################################### # SET THESE FOR YOUR BUILD CLIENT MACHINE # THIS WILL NOT START A BUILD IT WILL JUST SETUP THE TOOLKIT # USE THIS IF YOU WANT TO PERFORM AN EXPEDITED OR A FULL BUILD FROM THE COMMAND LINE # ssh -i &lt;ssh-private-key&gt; -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; # $BUILDCLIENT_USER&gt;sudo su # password:${BUILDCLIENT_PASSWORD} # cd agile-infrastructure-build-client-scripts/logs ################################################################################################# export BUILDMACHINE_USER=&quot;agile-deployer&quot; export BUILDMACHINE_PASSWORD=&quot;QQQPPPZZZMMM123098&quot; #Make sure any password you choose is strong enough to pass any strength enforcement rules of your OS export BUILDMACHINE_SSH_PORT=&quot;1035&quot; export LAPTOP_IP=&quot;111.111.111.111&quot; /bin/echo &quot; #BASE OVERRIDES export SSH= &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEgqlNPY9uh6SpihNXm/7XGqOKvAcH8Z0Y6pZG9lTIm/PHI5VijIFqs0OzM3DPLFARtut7lojBoKq9ljBmKeVBGX5EkJ5O3CJfEZs9E13e2Qk+7F9wTmoMBG8XY4l/SmD9HddLTS/7Oadg+C4RDxHlSMrl1PSCdzlM14spHCI8rwUntNCUY+fObolqel0829zYDX0oEWzYyoIEUs1847X3cRp9+yZsjqSD5Nw9jacLcWjtdfClEvx5F8ZVm0+s5OLtz9cCf6NkOgYf3KFz+e8qAO/w83Umh5B2Gem1uOxSDtUmzVlRiMTfP6CTSKRnYRnkb97F9RZsmAsG6+g+eKvp root@penguin &quot; #paste your public key here The rest of the script will appear below here .       . . 4) Take a copy of this entire updated script and keep it safe because you will likely want to use this script multiple times in future deployments remember that anyone who has a copy of this script you have made has enough information to access the build machine you are going to deploy in a minute. .       . . 5) What you need to do now is to use this script to spin up your build machine and you will do this by pasting it into the user data area of your build machine. . You will need to create a security group for your build machine. You can do this as follows:     . Click on the security groups option of your exoscale GUI     Click “Add Security Group” and call it PRECISELY “adt-build-machine” or something to your liking and then click “Create Group” .     You can then see your new security Group “adt-build-machine” listed .     Click on the “adt-build-machine” security group . Add rules to the “adt-build-machine” security group to allow pinging and your build client to connect. . . So you will need to add 2 rules . 1) Ping 2) A rule to allow acccess to your build machines defined SSH_PORT from your laptop. If you SSH_PORT is 1035 and your build client IP is 111.111.111.111 then you will need a TCP rule with “CIDR 111.111.111.111/32 1035” . You can see in this image that port 1035 is about to be opened up to the ip address of my laptop 111.111.111.111/32 .     . . 6) You need to spin up a small machine to be your build machine by clicking “Add” on the top right of the GUI. And then follow these steps: . 1. Select which template you want debian 10 (or later) or ubuntu 20.04 (or later) 2. Select which zone you want to deploy to, for example, CH-GVA-2 3. Select instance type &quot;Tiny&quot; for example 4. Select disk size (50GB) 5. Ignore SSH KEY 6. Make sure your security group &quot;adt-build-machine&quot; is set for this machine and deselect the &quot;default&quot; security group if it is selected. 7. In the &quot;User Data&quot; area of your VPC machine, paste the entire script that you were left with from 4. 8. Click Create and wait for your machine to build . Graphically you can see what I have described in these 8 steps here: .       . .       . . 7) Once the machine has built you can access it as follows: .     . Discover what the machine&#39;s IP address is by looking at the Exoscale GUI system for the IP address of the build machine - In this case: 185.19.29.134 .     . Now on your laptop issue the command: .     . ssh -i /root/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . or yours might be: .     . ssh -i /home/${username}/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . Once logged in to your build machine .     . sudo su [sudo] password for agile-deployer: .     . And then enter your build machine password .     . ${BUILDMACHINE_PASSWORD} .     . In Graphical form, it looks like this: .     . Grab your build machine’s IP address (third column) .     . Run through the commands as shown on your laptop to access your build machine .     . . .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsbuildmachinehardcore/",
            "relUrl": "/adtexoscaletutorialsbuildmachinehardcore/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "Exoscale ADT Tutorials Build Machine Method",
            "content": "PRE BUILD PREPARATIONS FOR EXPEDITED AND FULL BUILDS: . Before performing an expedited or full build, you need to set up a build machine. The way you do this for Exoscale is as follows: . . 1) If you don’t have an SSH key pair or if you want a specific SSH key pair for your builds, issue the following command: .     . /usr/bin/ssh-keygen -t rsa .     . Your key will be saved to the indicated file, for example, /root/.ssh/id_rsa your path might be different such as /home/bob/.ssh/id_rsa . Issue the command (for example) .     . /bin/cat /root/.ssh/id_rsa.pub - this will be your &lt;ssh-public-key-substance&gt; .     This will give you your public key which you need later so, take a copy of the output that is printed to the screen. .       . . 2) Take a copy of the script: Initial Script .       . . 3) If you look into the script that you made a copy of in 2, you need to populate the following variables in your copy: .     . export BUILDMACHINE_USER=&quot;&quot; export BUILDMACHINE_PASSWORD=&quot;&quot; export BUILDMACHINE_SSH_PORT=&quot;&quot; export LAPTOP_IP=&quot;&quot; . export SSH= &quot; &quot; .     Now you need to decide on a username for your build machine, a password for your build machine, a port for your build machine’s ssh system and the IP address of your desktop or laptop. . If I decide on a username of “agile-deployer” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_USER=&quot;agile-deployer&quot; .     . If I decide on a password of “QQQPPPZZZMMM123098” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_PASSWORD=&quot;QQQPPPZZZMMM123098&quot; .     . If you decide on an SSH_PORT of “1035” then in the copy that I made in 2, I need to change it as follows: .     . export BUILDMACHINE_SSH_PORT=&quot;1035&quot; .     . You need to give the script your laptop IP address. You can do this by going to https://www.whatsmyip.com and so, if your ip address is: “111.111.111.111” and pasting your ip address into your copy as follows: .     . export LAPTOP_IP=&quot;111.111.111.111&quot; .     . The public ssh key that you took a copy of in 1 needs to be pasted as follows: .     . export SSH= &quot;&lt;ssh-public-key-substance&gt; &quot; .     . The top part of the copy that you made in 2 will now look like this: .     . #!/bin/bash /bin/mkdir /root/logs OUT_FILE=&quot;webserver-build-out-`/bin/date | /bin/sed &#39;s/ //g&#39;`&quot; exec 1&gt;&gt;/root/logs/${OUT_FILE} ERR_FILE=&quot;webserver-build-err-`/bin/date | /bin/sed &#39;s/ //g&#39;`&quot; exec 2&gt;&gt;/root/logs/${ERR_FILE} ############################################################################################### # SET THESE FOR YOUR BUILD CLIENT MACHINE # THIS WILL NOT START A BUILD IT WILL JUST SETUP THE TOOLKIT # USE THIS IF YOU WANT TO PERFORM AN EXPEDITED OR A FULL BUILD FROM THE COMMAND LINE # ssh -i &lt;ssh-private-key&gt; -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; # $BUILDCLIENT_USER&gt;sudo su # password:${BUILDCLIENT_PASSWORD} # cd agile-infrastructure-build-client-scripts/logs ################################################################################################# export BUILDMACHINE_USER=&quot;agile-deployer&quot; export BUILDMACHINE_PASSWORD=&quot;QQQPPPZZZMMM123098&quot; #Make sure any password you choose is strong enough to pass any strength enforcement rules of your OS export BUILDMACHINE_SSH_PORT=&quot;1035&quot; export LAPTOP_IP=&quot;111.111.111.111&quot; /bin/echo &quot; #BASE OVERRIDES export SSH= &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEgqlNPY9uh6SpihNXm/7XGqOKvAcH8Z0Y6pZG9lTIm/PHI5VijIFqs0OzM3DPLFARtut7lojBoKq9ljBmKeVBGX5EkJ5O3CJfEZs9E13e2Qk+7F9wTmoMBG8XY4l/SmD9HddLTS/7Oadg+C4RDxHlSMrl1PSCdzlM14spHCI8rwUntNCUY+fObolqel0829zYDX0oEWzYyoIEUs1847X3cRp9+yZsjqSD5Nw9jacLcWjtdfClEvx5F8ZVm0+s5OLtz9cCf6NkOgYf3KFz+e8qAO/w83Umh5B2Gem1uOxSDtUmzVlRiMTfP6CTSKRnYRnkb97F9RZsmAsG6+g+eKvp root@penguin &quot; #paste your public key here The rest of the script will appear below here .       . . 4) Take a copy of this entire updated script and keep it safe because you will likely want to use this script multiple times in future deployments remember that anyone who has a copy of this script you have made has enough information to access the build machine you are going to deploy in a minute. .       . . 5) What you need to do now is to use this script to spin up your build machine and you will do this by pasting it into the user data area of your build machine. . You will need to create a security group for your build machine. You can do this as follows:     . Click on the security groups option of your exoscale GUI     Click “Add Security Group” and call it PRECISELY “adt-build-machine” or something to your liking and then click “Create Group” .     You can then see your new security Group “adt-build-machine” listed . 6) Add rules to the “adt-build-machine” security group to allow pinging and your build client to connect. . So you will need to add 2 rules . 1) Ping 2) A rule to allow acccess to your build machines defined SSH_PORT from your laptop. If you SSH_PORT is 1035 and your build client IP is 111.111.111.111 then you will need a TCP rule with “CIDR 111.111.111.111/32 1035” . You can see in this image that port 1035 is about to be opened up to the ip address of my laptop 111.111.111.111/32 .     . . 7) You need to spin up a small machine to be your build machine by clicking “Add” on the top right of the GUI. And then follow these steps: . 1. Select which template you want debian 10 (or later) or ubuntu 20.04 (or later) 2. Select which zone you want to deploy to, for example, CH-GVA-2 3. Select instance type &quot;Tiny&quot; for example 4. Select disk size (50GB) 5. Ignore SSH KEY 6. Make sure your security group &quot;adt-build-machine&quot; is set for this machine and deselect the &quot;default&quot; security group if it is selected. 7. In the &quot;User Data&quot; area of your VPC machine, paste the entire script that you were left with from 4. 8. Click Create and wait for your machine to build . Graphically you can see what I have described in these 8 steps here: .       . .       . . 8) Once the machine has built you can access it as follows: .     . Discover what the machine&#39;s IP address is by looking at the Exoscale GUI system for the IP address of the build machine - In this case: 185.19.29.134 .     . Now on your laptop issue the command: .     . ssh -i /root/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . or yours might be: .     . ssh -i /home/${username}/.ssh/id_rsa -p ${BUILDCLIENT_SSH_PORT} $BUILDCLIENT_USER@&lt;buildclientip&gt; .     . Once logged in to your build machine .     . sudo su [sudo] password for agile-deployer: .     . And then enter your build machine password .     . ${BUILDMACHINE_PASSWORD} .     . In Graphical form, it looks like this: .     . Grab your build machine’s IP address (third column) .     . Run through the commands as shown on your laptop to access your build machine .     . . .",
            "url": "https://www.codebreakers.uk/adtexoscaletutorialsbuildmachineexpedited/",
            "relUrl": "/adtexoscaletutorialsbuildmachineexpedited/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post20": {
            "title": "Digital Ocean ADT Tutorials",
            "content": "There’s a few options here for learning how to use this toolkit with the Digital Ocean cloudhost. . 1. Expedited Build Method (recommended) . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based . 2. Hardcore Build Method . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based . 3. The Full Build Method (interactive) . Tutorial Set 1 : Text Based Tutorial Set 2 : Video Based .",
            "url": "https://www.codebreakers.uk/adtdigitaloceantutorials/",
            "relUrl": "/adtdigitaloceantutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post21": {
            "title": "AWS ADT Tutorials",
            "content": "",
            "url": "https://www.codebreakers.uk/adtawstutorials/",
            "relUrl": "/adtawstutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post22": {
            "title": "Tutorials",
            "content": "Tutorial sets for the Agile Deployment Toolkit, organised by cloudhost provider . If you are new to this toolkit, pick which provider you want to use and then you can follow the tutorials to become familiar with how things work. . You will need to repeatedly reference the Specification throughout these tutorials. . . Digital Ocean Tutorials . | ExoscaleTutorials . | Linode Tutorials . | Vultr Tutorials . | AWS Tutorials . | .",
            "url": "https://www.codebreakers.uk/tutorials/",
            "relUrl": "/tutorials/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post23": {
            "title": "The Vision",
            "content": "What I am trying to achieve here is to treat fully featured applications as reusable encapsulated components. What this means is that if a development team develops an application using a CMS, say Joomla, that using this toolkit that application can be deployed or “instantiated” as a reusable component at an application level. This is similar to how plugins and extensions are used as components within the CMS itself except the application itself is the component or the building block. The ulitmate vision I have for this is that for a given town, you can deploy an encapsulated application once for each postcode and then have people who live in that postcode join the community to get better organised at a local level. Lets use Town A as an example. You could have . postcode0.townAsocial.uk . postcode1.townAsocial.uk . postcode2.townAsocial.uk . postcode3.townAsocial.uk . postcode4.townAsocial.uk . postcode5.townAsocial.uk . And so on. You then have an umbrella or “registration website” which delegates to the appropriate encapsulated component website. So, the umbrella website might be www.townAsocial.uk can you see how that umbrella website would delegate to each of the encapsulated child websites deployed using the agile deployment toolkit. Its not there yet, but, this is ultimately what I am aiming for. . What this means is that you could have a set of techies who are running the postcode1 website, a set of techies running the postcode2 website and so on. So, in this way, each website would be like a franchise sub component which fits into the greater scheme. This ties in with the philosophy of devolving power back to the local level or “taking back control” because the idea of “taking back control” is that it moves away from these huge centralised and remote setups such as the enormous social networks that we have seen so far and makes it possible for each self contained and therefore (relatively) easily managed sub section of the greater system to operate. The techies that run postcode0 and other community support personel wouldn’t need to know anything about the techies that run the postcode1, or the postcode2 subsection or subcomponent and yet they are tied together by the parent site www.townAsocial.uk. . What you could do is have representatives of the postcode1, the postcode2 and so on websites who are also members of a greater www.townASocial website which is only open to the annointed representatives of the child websites. These representatives can feed into the overarching website providing feedback and so on. In this way, it can help the people’s voice get heard. . Also, I have put quite a bit of work into figuring out how to make these websites and the ADT as secure as possible and so it means that there should be less hacking or vulnerabilties for people who are members of the community. I ain’t no saint, but, I did spend some time helping people who struggle with technology to become more proficient and I often wonder whether my efforts to help did more harm than good because, “a little knowledge is a dangerous thing”, or, “I know enough to be dangerous” meaning that once people become mildly proficient that is also the time when the danger is highest because of all the hacking attempts which they might not be savvy about. Having these enacapsulated local communities with vetted membership procedures, you apply to your local volunteer centre to join, for example, is a way of making sure that as much protection as possible is given to people who might be vulnerable to problems in the more “wild west” environment of the larger social networks. . The ADT is going to require some investment from you to be able to use. Did you expect to be able to drive your car first time, no, but, you put the effort into learning and once that effort is put in your life is better, so it is here. I think if you try out the ADT, you will see how it should be possible to make distinct deployments which all feed in to a bigger picture solution. . I think what I have built is realtively strong, but, it still needs to be battle hardened if you are up for that maybe if you are a plugin developer or extensions developer it is possible that some of your products might be used by application developers when they are building their reusable application components. In essence then this is about treating whole websites as plug and play components which can plug in to a greater system or skeleton and by using encapsulation build a grerater structure. .",
            "url": "https://www.codebreakers.uk/thevision/",
            "relUrl": "/thevision/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post24": {
            "title": "Background Philosophy",
            "content": "In another life, I was a consultant for a big IT outsourcing company used by the government for a lot of projects that they needed doing. The problem was the social disconnect. The users of the systems lived on a different planet to those of us building them. So, in order to be a consultant with conviction, I went to actually look, or, was led into looking by my intuitive self, to genuinely interact with the people that are end users of the systems so that I could actually advise based on experience rather than assumption. Here’s what I found: . The assumption is that people who rely on government systems don’t have much to contribute. That’s a very misled and even arrogant assumption if you actually mix with such ones you would find out that they know more than you and that your assumptions about which end of society is the arse end is just that, an assumption and it depends on your social orientation bias not on what it actually is. That was my first lesson which I relay here. . | Secondly, we are moving in to a technocracy and the problem is that the people I have worked with or consulted with directly were often technocratically disabled in the sense that they had no experience with technology which excludes them from the technology and therefore the technocracy. Most systems bolt on “accessibility” as an afterthought what I wanted to do is to build systems that had accessibility at their core and therefore lower the barrier to entry to the technology that is available. If you think about it, if you are elderly with visual impairments, or, disabled with mental impairments, or, difficulties with the English language, these are all problems that I could see in the big corporate systems that are available ordinarily within the community. So, what I wanted to do is build a system which enables the deployment of social applications, built by developers with the highest commitment to accessibility requirements, that can be deployed and redeployed easily. That is what the Agile Deployment Toolkit is about enabling or seeking to enable. It makes it possible to easily deploy simple social networks and other application types that can be used by people who find the regular technologies a bit unwieldy. I can’t solve all problems and I have questions that need answered the same as anyone else does, but, ultimately, that is my finding and that is what I have worked on. Something that this toolkit could be used for might be for coordinating social projects. . | Built for local people and run by local people. Something else I found is that we have this huge global thing going on and we don’t know who our neighbours are. If you have a problem with one of the big social networks it is next to impossible to get access to “support” because there’s billions of users and so on. If you have hyper local applications they can be run by people who actually live in the same town as you and by doing that, you can have direct access to the techs that run your community site. You can also specialise your applications specifically for the needs of your local community. . | The challenge was to build something useful without much money. Purity of motivation means that you do it for the love of it and not just for the money, so, this is not a big budget attempt here, in fact, there is hardly any budget at all, but, consider that that is what keeps it as pure as possible? . | Another simple philosophy I learnt the hard way is that this is a team effort. Nobody wants to see some bloke at the top of the mountain whilst there are others who are at base camp and that is kind of what has happened with technology. There are people who are at the top of the technology mountain and pushing on further still, I was heading in that direction, but, I got pulled out of that path and had to descend back down to mix and help people who had no technical knowledge at all and that is what you learn, if we are going to become a technocracy we do it together and all of us have a duty to make sure that we do it as a whole team and not as a few gung-ho intrepids. So, what I wanted to do is use some of my technocratic potential to build software that has the potential to include those who were previously excluded. That is functioning as a team and until we do, we won’t make it home (psychologically). You see, once God shows up, He makes it clear to you that your idea of who and who isn’t important might not be the same as His idea of who is and who isn’t important. That’s a tough lesson. . | On a grand scale, and, this is philosophical rather than practical, there are two ways to run governments, centralised and decentralised. We can all see that governments are struggling and its no wonder, they are only human. The point of decentralisation (which is what this toolkit (and dare I say it Brexit)) are about is about redressing the power vacuum that monolithic centralied institutions leave at a local level. In other words, if you use a toolkit like this, or, something similar to organise locally that’s as effective a way of governing as anything that is centralised into power titan control systems. In essence, there is a happy medium, kinda not UK, kinda not EU, but more like EUK and that involves hyper local projects and without wanting to undo the government in any way, I think we can all see that if there are tools which can help with local organisation that that is not only good for communities but it is also good for governments. If you do run your social networks locally, then, you have more capacity to monitor what is happening with it. The whole point is that there is no centralisation of anything here, what I have written as a toolkit is just a tool that can be used in the process of leveraging more local influence over the process of social organisation. . | Untapped power base. Maybe I am a freak case but have you ever considered that “none of us have all of the answers but, we all have some of them?”. What this means is that you might be struggling because you just assumed that some sections of society have the answers (universities, schools, companies) and other sections don’t, (the elderly, mental health patients and criminals). Is it beneath you to actually come down off your high horse and make it so that you are open to what others have to say even if perhaps you assumed that you only had things to tell them and they didn’t have anything to tell you? If you start including everyone then you find that everyone has something to add to the mix and if you think they don’t you are not being a wholly person. . | To sum up my learnt philosophy then, I want to build hyper local applications that can be repeatedly deployed, make those applications as good as possible by having the very best CMS based talent develop them with accessibility in mind and have a consistent process for deploying the same application multiple times, for example, for town A, town B, town C and so on. .",
            "url": "https://www.codebreakers.uk/backgroundphilosophy/",
            "relUrl": "/backgroundphilosophy/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post25": {
            "title": "The Agile Deployment Toolkit",
            "content": "Introduction . Tech Overview . Background Philosophy . The Vision . Tutorials .",
            "url": "https://www.codebreakers.uk/agiledeploymenttoolkit/",
            "relUrl": "/agiledeploymenttoolkit/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post26": {
            "title": "The Agile Deployment Toolkit Tech Overview",
            "content": "Fully automated virgin server configuration and deployment with sensible default webserver and database configuration settings with best practice security guidelines baked in. . | Flexible deployment options - number of webservers to be used for a deployment when in production mode with a single webserver development mode, for when you are developing your application. . | In built resilient and scalable architecture including flexible time based scaling to accommodate increased or decreased capacity . | Option to use “self managed” databases or to use managed as a service databases from a 3rd party (DBaaS) . | Moderate learning curve for usage . | Support for deployment to multiple cloud hosts. Currently, Digital Ocean, Exoscale, Linode, Vultr and AWS. If you develop a problem or issue with the cloud host you have deployed to, simply perform a frictionless redeploy to another of the supported VPS cloud host providers . | Easily choose the machine sizes that you want to deploy to, depending on what capacity you need . | Deploy to Ubuntu or Debian with extensibility of the scripts to other flavours of Linux taken into consideration . | Automated “double” backups . | Easy inbuilt SMTP configuration for your application . | Several supported application types - Joomla, Wordpress, Drupal, Moodle and with a little work, further application types can be added . | Built with general extensibility in mind so that scripts are easy to extend . | Free to use, free to extend . | Choice to use Cloud-flare as your DNS service provider for increased security . | Easy command line access to your servers (no faff) . | Choice of webservers to use, NGINX, APACHE, LIGHTTPD . | Current support for PHP based applications, but, with potential to be extended to support other languages . | Ability to store application assets in the cloud which saves disk capacity (and cost) on your server machines . | Choice of self managed databases to use, currently, MariaDB, MySQL or Postgres . | Ability to deploy your own mailservers using iRedmail . | Status messages deliverable by email during system operation . | The Agile Deployment Toolkit is designed to have a core of functionality, which can be thoroughly tested and well maintained, but, it is also designed to be extensible outside of the core so that it is flexible enough to support an arbitrary set of solutions as are required by the users of the toolkit. . | .",
            "url": "https://www.codebreakers.uk/agiledeploymenttoolkittechoverview/",
            "relUrl": "/agiledeploymenttoolkittechoverview/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post27": {
            "title": "Introduction",
            "content": "Agile Deployment Toolkit . Is shared hosting not the ideal solution for your web hosting? . | Do you want to have your own set of configured VPS servers but do not want to spend the time configuring and deploying software on them? . | Do you want to have consistent security processes baked in to your server deployments? . | Would you like to be able to redeploy to a different (supported) VPS host easily - within 20 minutes or so, if you needed to? . | Does automated server configuration with the latest releases of software included for each deployment sound attractive? . | Would you like a low barrier to entry solution using nothing but basic scripting techniques? . | . Then you might be interested in the Agile Deployment Toolkit which currently supports Joomla, Wordpress, Moodle and Drupal CMS applications. . . MOTIVATION: You can find lots of tutorials online which show how to install and configure server machines using products such as Apache, Nginx, Mysql, Postgres and so on. Following these tutorials to build your own server system is time consuming and possibly error prone if, for example, you don’t remember to do everything with regard to security when you build your server, you could have problems. What I decided to do was write some scripts which would automate the building of my servers in a consistent and predictable way. Using my software, popular CMS systems can be deployed starting from scratch with brand new VPS machines in minutes rather than possibly hours or even days providing nothing to the scripts but configuration parameters. For some people, this solution might be a good fit for their server deployments rather than having to follow tutorials and so on. With this method, you still have full access to your VPS systems to tinker with the configuration, or, you could modify the scripts directly to attain an “other than default” configuration for your server systems. This approach has application backups and so on built in and the scripts are written to be extensible by anyone. . Deploy to any one of several major cloud providers according to your needs. This toolkit uses the term “agile” to indicate that it’s easy to redeploy to another one of the supported cloud hosts should your current cloudhost not support your needs - in an agile way. This toolkit is ideal for anyone who wants to investigate how to run their own server systems. It gives a unique, consistent way of server deployment which can be reviewed, tweaked and understood in the same way that car enthusiasts might review, tweak and understand the inner workings of their cars. The intention is to use this for serious systems, but, learners or students might find it of benefit if they want to experiment with server configurations and so on. . Many VPS providers out there, don’t necessarily have clear processes for deploying scalable CMS systems, so, maybe, if that’s the case, this might help. This toolkit is built from the ground up to be extensible so, if you have a use case or requirement that it doesn’t fulfil, you are welcome to fork the repositories and extend as your needs demand. There’s many many PHP applications out there and almost certainly with appropriate extensions to these scripts they can be deployed and operated at scale. The design pattern here is essentially akin to a CMS system’s design in that I write and maintain a core set of scripts and other developers, if they choose to, can extend the scripts to meet additional needs or requirements. The ultimate aim is to be able to treat whole applications as out of the box solutions. . OBJECTIVE: To provide a well written and designed toolkit which facilitates repeated bespoke CMS application deployments to various VPS providers with customised branding using nothing but command line configuration options. . NOTE: I am open to all improvement suggestions and the toolkit has been written to be easily extensible in all regards, so you are free to extend this toolkit to meet your own needs should your requirements fall outside that which is already supported. . . Below is a list of VPS cloud hosts that this toolkit currently supports. . . . Digital Ocean is a cloudhost that is simple to use and global. They also provide managed databases and so on, so their service offering is growing. .         . . . Exoscale is a Swiss cloudhost, so, if you like the idea of being with a Europe centric cloudhost because their datacentres are either in Switzerland (in decommissioned military nuclear bunkers) or elsewhere within the EU. .         . . . Linode is a cloudhost from the US with global reach. Again, their interfaces are simple and their service offerings are expanding. .         . . . Vultr are a smart cloudhosting company. They seem particularly strong on security to me with processes and so on in place to make sure that things are tied down in terms of security. .         . . . AWS is the world’s largest cloudhost. It also provides a plethora of services such as managed databases and so on which means that your application will be well served if you deploy here.         . .",
            "url": "https://www.codebreakers.uk/introduction/",
            "relUrl": "/introduction/",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post28": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://www.codebreakers.uk/2020/01/14/test-markdown-post.html",
            "relUrl": "/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My Github is at: Agile Deployer .",
          "url": "https://www.codebreakers.uk/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.codebreakers.uk/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}